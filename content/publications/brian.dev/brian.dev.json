{"id":1,"name":"brian.dev","description":"brian.dev","base_url":"https://brian.dev","created_at":"2020-04-06T14:59:16.724Z","updated_at":"2020-04-06T14:59:16.724Z","articles":[{"id":4,"title":"Azure DevOps CI Setup","content":"Microsoft just announced a killer continuous integration setup for Github, and I was really anxious to give it a try.  This post documents my setup for an [Elixir/Phoenix application](https://github.com/gophersnacks/site) I'm building with [Aaron Schlesinger](https://twitter.com/arschles).\n\n### Set Up Azure Pipelines\n\nStep one is to head to the [Github Marketplace](https://github.com/marketplace/azure-pipelines) and install the Azure Pipelines service.\n\n![Azure Pipelines on Github](https://content.brian.dev/uploads/3d79ad4e82704fa381a8f32af094b91f.png)\n\nI clicked on the \"Set up a plan\" button, and then selected the Free option, and \"Install it for free\" link.  This allows Linux, Mac and Windows build machines, with 10 free parallel jobs.  That's plenty for most open source projects.\n\n![Confirmation Dialog](https://content.brian.dev/uploads/84e39a4b6bc54504b6c7a9661d211c4d.png)\n\nNext I confirmed the Marketplace change by choosing the \"Complete order and begin installation\" button.\n\n![Review Order](https://content.brian.dev/uploads/3261b755243c466ba2072d618f7e0aa7.png)\n\nAfter authentication with my Azure account, I needed to create a Project.  Projects in Azure DevOps are conceptual containers that host a single repository and it's build procedures.\n\n![Setup Project](https://content.brian.dev/uploads/e2c4441bab0540e9bcbefc2b52b15c3e.png)\n\nAfter creating the project, I needed to pick a repository:\n\n![Choose A Repository](https://content.brian.dev/uploads/d2cb837e0c7d4eac98c6eb2f0fd9d3a0.png)\n\n### Configuration\n\nThe Azure DevOps pipeline wizard suggested a Docker pipeline for this Elixir project, which suits me fine.  We had already created appropriate Dockerfile and docker-compose.yml files.  The last step was to create an azure-pipelines.yml file and put it in the root of the repository.\n\n```javascript\n# Docker image\n# Build a Docker image to run, deploy, or push to a container registry.\n# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:\n# https://docs.microsoft.com/vsts/pipelines/languages/docker\n\npool:\n  vmImage: 'Ubuntu 16.04'\n\nvariables:\n  imageName: 'gophersnacks:$(build.buildId)'\n\nsteps:\n- script: |\n    docker-compose -p site up -d\n    docker build --network=site_default --build-arg MIX_ENV=test -f Dockerfile.test .\n    docker-compose down\n  displayName: 'test'\n- script: docker build -f Dockerfile -t $(imageName) .\n  displayName: 'docker build'\n ```\n\n After some experimentation I created two steps in my pipeline, the first runs tests, and the second builds the Docker container for production usage.  As is the case every time I create a new CI environment, it took 40 commits to get the Docker networking and database configuration setup right.  Eventually, though, I succeeded:\n \n ![FAIL](https://content.brian.dev/uploads/512fbfeeead148ada3b15c495993b143.png)\n\n These results were correct; I hadn't updated the tests since adding authentication to the web app yesterday.  *So I did what any good developer would do – I deleted the failing tests.*  Just temporarily, of course, because I wanted to focus my time on configuring Azure Pipelines, not learning how to test authenticated HTTP requests in Phoenix.\n\n### Conclusion\n\nThe process to set up Azure DevOps Pipelines was really simple, and mostly involved clicking on a series of green buttons and integrating the Docker setup we had already created.  I was impressed by the speed of the builds after I pushed my commits to Github.  I think we have a winner with the new DevOps releases.  You can find the documentation on [docs.microsoft.com](https://cda.ms/F8).\n\nIn future posts, we'll get this Pipeline configured to push to a Kubernetes cluster to add Continuous Deployment to this application.","published_at":"2018-09-11","created_at":"2020-04-08T13:44:36.890Z","updated_at":"2020-04-08T13:49:50.599Z","category":3,"publication":1,"slug":"Azure-DevOps-CI-Setup","author":1,"excerpt":"Microsoft just announced a killer continuous integration setup for Github, and I was really anxious to give it a try.  This post documents my setup for an [Elixir/Phoenix application](https://github.com/gophersnacks/site) I'm building with [Aaron Schlesinger](https://twitter.com/arschles).","published":null,"live":true,"image":{"id":16,"name":"unsplash-photos-QRkew0KwXSM.jpg","hash":"6655acdb14ab4463939ddf47d92868d4","sha256":"F12t7g8Bjom5f68dV96X1rQyWlts56kqxVNLyIVsbY0","ext":".jpg","mime":"image/jpeg","size":259.89,"url":"/uploads/6655acdb14ab4463939ddf47d92868d4.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T13:44:36.925Z","updated_at":"2020-04-08T13:44:36.925Z"}},{"id":7,"title":"Egg Bites","content":"\nThis post is a change from the usual technical content.  I made my own Egg Bites this morning, inspired by the delicious ones I like to get at Starbucks.\n\n### Recipe\n\nPrep: \n\n* Preheat your oven to 325 Fahrenheit\n\nIngredients:\n\n* Eggs\n* Cheese\n* Bacon\n\nAlso Need:\n\n* Muffin Pan\n* Vegetable Spray\n\nDirections:\n\n1. I started by cutting a vertical slice off a new rasher of bacon so I had a dozen 2 inch pieces of bacon.  I fried up the bacon until it was pretty crispy, then drained it and blotted it to get as much of the grease off of it as possible.\n1. Then, I sprayed a muffin pan made for pretty decent sized muffins with vegetable spray to prevent sticking.\n1. Next, I coated the bottom of the muffin pan with shredded cheddar cheese.\n1. I placed a few pieces of bacon on top of the shredded cheese.\n1. Next I whipped eggs in a bowl, then poured them over the cheese/bacon in the muffin pans.  I filled the muffin pan roughly 2/3 full.  That was about 2 eggs per muffin slot.  This will vary based on your muffin pan size.\n1. Finally, I sprinkled more cheese on top.\n\nI baked them for 12 minutes initially, they weren't done.  So I added another 6, then another 2 minutes.  It ended up being perfect at 20 minutes.  Your mileage will vary based on your oven, and the size of muffin pan.\n\nNext I'll vary the ingredients.  Keep in mind they'll get soggy if you add wet ingredients (I'm specifically thinking of things like red and green peppers which hold a lot of water).  Lots of different combinations sound delicious, and they seem to be keeping well in the refridgerator.  Delicious!","published_at":"2019-09-13","created_at":"2020-04-08T13:59:57.075Z","updated_at":"2020-04-08T14:01:22.675Z","category":6,"publication":1,"slug":"Egg-Bites","author":1,"excerpt":"This post is a change from the usual technical content.  I made my own Egg Bites this morning, inspired by the delicious ones I like to get at Starbucks.\n","published":null,"live":true,"image":{"id":21,"name":"eggbites.jpeg","hash":"b90d805ebf904dd09ff2116f5341820c","sha256":"4xS1bmXIrzYUFtpr71XC8h91mO-YHhdRWzB-q7wWdRs","ext":".jpeg","mime":"image/jpeg","size":1519.25,"url":"/uploads/b90d805ebf904dd09ff2116f5341820c.jpeg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T13:59:57.111Z","updated_at":"2020-04-08T13:59:57.111Z"}},{"id":18,"title":"Remote SSH Connections to WSL2","content":"\n## Remote Access for New Windows Users\n\nIn this article I share my learnings on remotely accessing your Windows 10 computer. My motivation was to determine efficient ways to access both the Windows environment, and the WSL2 development environment from another computer.\n\nFind other articles in this series [with this link](/tags/30daywslchallenge/).\n\nFor emphasis in this article, many of the screenshots are taken from my iPad Pro accessing my desktop computer running Windows 10 and WSL2.\n\n### Windows\n\nAccessing a Windows computer remotely is extremely simple and performant compared to options for macOS and Linux. Windows users have long enjoyed the [Remote Desktop Protocol](https://docs.microsoft.com/en-us/windows/win32/termserv/remote-desktop-protocol). An over-simplified description of the RDP protocol would state that it encodes user interface changes as network packets and sends them to the client. RDP has hooks deep into the operating system, so it's a very efficient protocol. On the same local network, an RDP connection is nearly indistinguishable from a local login. Even over the internet, or a VPN, RDP is extremely usable. \n\n#### Enabling Remote Desktop\n\nTo enable RDP, go to `Start > Settings > System > Remote Desktop`, and enable the slider.\n\n![Remote Desktop](https://content.brian.dev/uploads/7640475234ee43ef8f2d4a94f110a497.png)\n\nIf you intend to connect from a client that isn't running Windows (like my iPad, for example) you'll also want to click the `Advanced Settings` link and disable Network Level Authentication. This reduces security slightly, so be sure to research the implications and assess your risk before exposing your computers over untrusted networks. My desktop is only available on my local network, or when I use the VPN I've created on my Unifi Edge Router.\n\n![Network Level Auth](https://content.brian.dev/uploads/a141f2110ca24db2985d40eab20bdbee.png)\n\nThat's all you need to do on the host side. On the client, grab a Remote Desktop Client from whichever App Store or software source you usually use for downloads.  On my iPad I searched for \"Remote Desktop\" in the App Store, and downloaded the official Microsoft remote desktop client.\n\nTo connect, find your host's IP address and configure the remote desktop client to connect by IP address.\n\n### WSL2\n\nHere's where the fun starts.  I'm quite used to connecting to my development environments via ssh. When I moved to Windows, that seemed like something I'd have to give up because it didn't look possible.  Then I stumbled on a [post](https://community.ui.com/questions/UNMS-running-on-Windows-10-Subsystem-Linux-2-WSL2/552f3b66-c1f0-41f1-8aa5-f2e6e0f56a5a) on the Unifi forums that mentioned a Windows command I vaguely remember from 15 years ago.  `netsh`\n\nStart by installing the package `openssh-server`.  Then edit `/etc/ssh/sshd_config` to change the `Listen` port to something other than 22.  I set mine to `2222`.\n\n```\n❯ cat /etc/ssh/sshd_config\n#       $OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $\n\n# ... snipped lines ...\nPort 2222\n\n# ... more snipped lines ...\nPasswordAuthentication no\n```\nI also set `PasswordAuthentication` to `no`, which means I'll be using SSH keys to authenticate.  Put authorized public keys in `~/.ssh/authorized_keys` in order to use this setting.  If you don't allow Password Authentication, you have to have keys setup, so don't enable this without understanding what's going on.\n\nNow, using `netsh` I can port forward connections from Windows to the VM that's running WSL2.  To do this you'll need to get the IP address of your WSL2 instance.  `ip addr` or `ifconfig` should do the trick.  Mine is `172.19.149.102`, so the PowerShell command to forward port 2222 from Windows to my WSL2 instance is this:\n\n```\nnetsh interface portproxy add v4tov4 listenport=2222 listenaddress=0.0.0.0 connectport=2222 connectaddress=172.19.149.102\n```\n\nFinally I had to allow port 2222 through the Windows Firewall.  The simplest way to do this is using the advanced firewall configuration.\n\n![Firewall Settings](https://content.brian.dev/uploads/eff8b846babe4cf393ce84eedda70e3e.png)\n\nThen open the Advanced Firewall settings:\n\n![Advanced Firewall Settings](https://content.brian.dev/uploads/771f1ab0a1e34c1e968831498dd5ebe2.png)\n\nClick \"Inbound\" in the left pane, then \"New...\" on the right pane.  Choose \"Port\":\n\n![Port](https://content.brian.dev/uploads/fe9af91c4fa84146bbc0fde148828244.png)\n\nThen specify port 2222:\n\n![Port 2222](https://content.brian.dev/uploads/620e43b5fda14bbbb02408d9ce9cf143.png)\n\nSpecify \"Allow\"\n\n![Allow](https://content.brian.dev/uploads/c98193138c4c4cf5bfcb761da4cb91c6.png)\n\nThen uncheck \"Public\" when it asks which networks to apply these rules to.  If you're on a public network, we don't want anybody trying to get ssh access anywhere.\n\n#### Profit\n\nNow from anywhere on your LAN, you can ssh to the IP of your Windows computer on port 2222.  I used the Blink app on my iPad Pro and connected with the following command:\n\n```\nssh -p 2222 bjk@192.0.1.100\n```\nwhere the `192.0.1.100` is the IP address of my Windows machine.\n\n#### Extra Credit\n\nFor extra credit you can set up port forwarding on your internet router to forward to this same service. I picked a random high port (like 28945), and set up port forwarding from that port to port 2222 on my Windows machine.  Because it's an uncommon port, it won't get the usual SSH bot scanning traffic, and I don't have root login or password authentication enabled in the ssh daemon configuration.  So I feel relatively good about the security risk.  Be sure to understand your security profile before undertaking something like this.\n\n\n\n## References and Further Information\n\n* [WSL Tips and Tricks](https://wsl.dev)\n* [Awesome WSL](https://github.com/sirredbeard/Awesome-WSL/blob/master/README.md)\n* [Windows Subsystem for Linux Documentation](https://docs.microsoft.com/en-us/windows/wsl/about)\n* [All WSL distributions in the Microsoft Store](https://aka.ms/wslstore)\n","published_at":"2020-03-03","created_at":"2020-04-08T14:32:26.622Z","updated_at":"2020-04-08T14:32:26.629Z","category":1,"publication":1,"slug":"Remote-SSH-Connections-to-WSL2","author":1,"excerpt":"In this article I share my learnings on remotely accessing your Windows 10 computer. My motivation was to determine efficient ways to access both the Windows environment, and the WSL2 development environment from another computer.","published":null,"live":true,"image":{"id":56,"name":"_XLJy3h77cw.jpg","hash":"d98ef5c6cff646dcb140dae212aacbba","sha256":"8mJYZ0tFhrw4PvCgHMSJaY-e1mzmBEqk3ku2Q5rKYVI","ext":".jpg","mime":"image/jpeg","size":405.74,"url":"/uploads/d98ef5c6cff646dcb140dae212aacbba.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:32:26.654Z","updated_at":"2020-04-08T14:32:26.654Z"}},{"id":12,"title":"Running i3 Window Manager on Bash For Windows","content":"\nThat might be the longest title for a blog post ever, but it's kind of hard to describe what's going on here if you're not familiar with the latest updates from Microsoft land.  <!--more-->Here's a quick refresher:\n\n* This spring Microsoft announced [Bash on Ubuntu on Windows](https://msdn.microsoft.com/en-us/commandline/wsl/about), also known as the Windows Subsystem for Linux.  Read the post, the FAQ, etc in that link.  I'll summarize: Microsoft wants to make Windows the best place for ALL developers to work.  A lofty and ambitious goal, to say the least.  Their crazy idea -- translate Linux system calls into NT Kernel calls using a small shim layer.\n\n* This is not a virtual machine.  The system calls are translated by the shim layer (WSL) and run directly on the NT Kernel.\n\n* This is kind of a Big Deal.  If it works, it has the potential to win back many developers who abandoned the Windows platform years ago because of the inability of Windows to deal with the *nix world.  The huge popularity of Ruby, Python, Redis, and dozens of other *nix first tools that were born in *nix.  Some of these tools, like Ruby, have Windows installers, but Windows is an afterthought and second-class citizen at best.\n\n* Many developers (like me) started using Windows but moved to Mac or Linux operating systems over the years as it became increasingly hard to write software in Windows.  \n\n* [Opinion] Linux isn't the best place to work 100% of the time.  Office applications are lacking compatibility and features.  There is no decent email client for Linux.  Save your apologist comments and *what about Open Office/Geary/Thunderbird* comments.  If you've used them, you know that they're not as nice as the applications available in macOS and Windows.\n\n* [Opinion] macOS is slipping in quality, and falling behind in features.  I've grown increasingly frustrated over the past 3 years using MacOS X as my daily driver.  Frequent crashes and very poor QA from Apple have lead to an operating system that used to be amazing becoming less so at each release.  I used to be a dyed in the wool Mac zealot.  Apple eroded my confidence in their operating system to the point that macOS is now where I go to do emails and other administrative tasks, but I do daily development on an Arch linux desktop sitting next to my MacBook Pro.  Worse, although macOS is UNIX compliant and has an almost-*nix like environment available, far too many things don't work in macOS that are required for modern Internet software development.  The hacks that we've put up with over the years are a testament to how poor Linux is for administrative work and how nice macOS was for the same.\n\nGiven this set of circumstances and opinions, I was more than a little excited when Microsoft announced WSL.  It promised to give developers what could be the best of all worlds.  A modern and capable desktop operating system -- Windows 10 -- with all of the quality features and support for modern hardware that we would expect.  AND a real installation of Ubuntu Linux running along side of it.  Not virtualized, running in Virtual Box or Parallels Desktop or VMWare, but right there on my laptop running at native speed.  The idea has real promise.\n\nSo when I got a new Dell XPS 13 Developer Edition (Ubuntu Pre-installed) the first thing I did was put the latest version of Windows 10 Insider Edition on it.  Over the course of a day it updated to Build 14379, which is the latest as of July 2, 2016.  I had tried previous builds, but found simple things like git or zsh didn't work well.\n\nImagine my surprise when I installed Bash for Windows on this build and pretty much everything worked.  I cloned my [dotfiles](https://github.com/bketelsen/dotfiles) and ran the post-install scripts that install i3 window manager, neovim, zsh, Go, and all the requisite development tools that I'm used to.  Nothing failed. (I didn't try running i3 yet, because I knew there was no X server installed)\n\n*Nothing Failed*\n\nThe real shortfall of running Bash for Windows right now is the lack of a good terminal emulator.  I tried ConEmu and maybe half a dozen others, with ConEmu being the best of this sorry lot.  If you're used to using a good terminal in Linux, none of the tools available on Windows are going to satisfy you.\n\nI knew from my Windows work 20 years ago that there were XWindows servers available.  I searched and found MobaXterm.  It has a built in terminal emulator (also crap -- sorry), but among the other features included there's a pretty good X Windows server. \n\nI've been in love with i3 window manager since Erik St. Martin introduced me to it 3 years ago.  Having such nicely organized and tiled windows over multiple desktops is an amazing productivity boon.  With good keyboard shortcuts for every operation, I found I never took my hands off the keyboard.  \n\nI started MobaXTerm and looked at the X Server settings.  I shrugged, fired up the X Server and typed \"i3\" in my bash prompt.  `i3` complained that there was another window manager already running.  I went back to the X Server settings and chose \"Windowed Mode: X11 Server constrained to a single window\".  It was the only X Server that didn't also start a window manager like `dwm` or `fvwm`.  So it started a simple \"rooted\" X Server which appears as a window on my Windows desktop with a black screen.\n\nReturning to bash, I typed `i3` again.  Gloriously, the famililar `i3` session appeared.  I'm able to install and run Linux GUI applications like Firefox.  I have `terminator` running as my terminal emulator.  I'm running `zsh` as my shell.  Neovim *just works*, as does Go.  All of them think they're running on a Linux computer, because for all intents and purposes they are.  It just happens to have a Windows NT kernel at its core.\n\nStrange, strange times we live in. 20 years ago Microsoft called Linux a cancer and did everything they could to make it die.  Today they're embracing Linux -- and by extension me -- and I have to say I'm really impressed with the outcome.\n\n*This article was created in `neovim` for Linux, running on a `zsh` shell inside `i3 window manager` running in a MobaXTerm X Server on a Windows 10 laptop.*\n\nScreen shots:\n\n![i3 in MobaXTerm](https://content.brian.dev/uploads/242fe11972d44c89b2454ee6392dd38c.png)\n\n![i3 behind Windows](https://content.brian.dev/uploads/237fd4061c4b470d92fd52d30760cf99.png)\n\n\n\n","published_at":"2016-07-03","created_at":"2020-04-08T14:14:46.810Z","updated_at":"2020-04-08T14:14:46.817Z","category":1,"publication":1,"slug":"Running-i3-Window-Manager-on-Bash-For-Windows","author":1,"excerpt":"That might be the longest title for a blog post ever, but it's kind of hard to describe what's going on here if you're not familiar with the latest updates from Microsoft land.  ","published":null,"live":true,"image":{"id":35,"name":"windows-on-top-1.png","hash":"73e40d8764b54ec99bd1292eb59bdc4b","sha256":"3GLA0zx0oCIQJ8POP9zptcj1l8W38bZCSxxP6szZ-NM","ext":".png","mime":"image/png","size":466.54,"url":"/uploads/73e40d8764b54ec99bd1292eb59bdc4b.png","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:14:46.835Z","updated_at":"2020-04-08T14:14:46.835Z"}},{"id":24,"title":"Arrested DevOps Appearance on Krustlet","content":"I had a great time on the Arrested DevOps podcast with Bridget Kromhout.  We chatted along with Taylor Thomas of the Deis team about [Krustlet](https://github.com/deislabs/krustlet).\n\nYou can [listen here](https://www.arresteddevops.com/krustlet/) or find it in all the usual podcast places, like Spotify and iTunes.  ","published_at":"2020-04-14","created_at":"2020-04-14T19:07:31.166Z","updated_at":"2020-04-14T19:07:31.184Z","category":1,"publication":1,"slug":"Arrested-DevOps-Appearance-on-Krustlet","author":1,"excerpt":"I had a great time on the Arrested DevOps podcast with Bridget Kromhout.","published":null,"live":true,"image":{"id":79,"name":"krustlet-banner.png","hash":"02f8f223e6474aa69c1af7947004213b","sha256":"X9AGnDBLCmUVSgDFfBQKnM--I04wisoUiJkmsHX3R2M","ext":".png","mime":"image/png","size":87.57,"url":"/uploads/02f8f223e6474aa69c1af7947004213b.png","provider":"local","provider_metadata":null,"created_at":"2020-04-14T19:07:31.205Z","updated_at":"2020-04-14T19:07:31.205Z"}},{"id":3,"title":"Organizing Documents with Some AI, ML, and Elbow Grease ","content":"In this first post of (likely) a multi-part series I'm going to discuss how I am using machine learning, AI, and good old-fashioned elbow grease to make sense of the 3000 files in my `~/Documents/Unfiled` directory.\n\n### The Problem Statement\n\nThere are several contributing factors to the problem.  Let's start with the obvious ones:\n\n* I'm a digital packrat\n* I'm a single parent of 3 (and therefore busy)\n* I can be lazy sometimes\n* I have ADHD, and get easily sidetracked from things I intended to do\n\nWhen my dad passed away last year, it got even worse.  Suddenly I was getting all of his mail, bills, correspondence, too.  I didn't want to lose it; but I sure wasn't ready to read it all.  So I scanned it and dropped it in the `Unfiled` folder. \n\nSo now we're here.  Where `here` is a place where I can't find anything I need and my `Documents` directory is the definition of `hot-mess`.  \n\n### The Goal\n\nI'd like to take that folder of 3000 random unclassified documents and sort them into something more clear.  I think sorting them by originating source (Supplier, Vendor, Biller, Organization) is a good first step.  Eventually I'd like to sort them by date group too.  Probably by Year, then Month.\n\nFor a bonus, I'd love to do a [projected filesystem](https://docs.microsoft.com/en-us/windows/win32/projfs/projected-file-system?WT.mc_id=none-twitter-brketels) sort of thing in Windows and a [Plan9](https://9p.io/wiki/plan9/Installing_a_Plan_9_File_Server/index.html) type server on Mac/Linux using FUSE.  It'd be really convenient to be able to get at documents from a Filesystem interface by using different facets like keywords, dates, categories, etc.  That might fit more cleanly with the way I think, too.  But, again, that's a stretch goal, because we'll need all that metadata first.\n\nIf you're old enough to remember [BeOS Filesystem](https://arstechnica.com/information-technology/2018/07/the-beos-filesystem/), it would have solved nearly all of this.  Someday we'll get back to the database/filesystem mashup that truly needs to exist.\n\n\n\n### The Solution(s)\n\nFirst, there isn't really a one-step solution to this.  It's going to take some work, and I can likely automate MOST of that.  But there will still be a good portion of things I can't sort automatically.\n\n#### Step One\n\nAs a first step, I wrote a small Go program that calls [Azure Cognitive Services](https://cda.ms/126) Vision API to do Optical Character Recognition on all the files that are compatible (PDF and image files).  Nearly everything I have is in pdf format, but there are a few TIFF files in there too.  This program is in flux right now, so I'm not going to release it as Open Source until it's settled a bit.  If I forget - ping me on twitter @bketelsen or email mail@bjk.fyi - and remind me!  Related: the code samples in this post are probably garbage, and won't likely match the end result that I publish.  I'm sure I'm swallowing errors, and haven't done the slightest bit of refactor/cleanup on this code yet.  \n\n> WARNING: *Don't cut/paste this code yet, please.*\n\nI created a domain type appropriately called `Document` that stores metadata about files on disk:\n\n```go\ntype Document struct {\n\tHash         string\n\tPath         string\n\tPreviousPath string\n\tOperation    *CognitiveOperation\n\tResults      *CognitiveReadResponse\n}\n```\nI'll discuss the fields as they come up, but `Path` and `PreviousPath` should be obvious.  Current and previous location on disk, so that I can account for file moves with at least a little bit of history.\n\nThe pricing for the OCR is really attractive - as of September, 2019 it is:\n\n> 0-1M transactions — $1.50 per 1,000 transactions\n\nI know that I'll be fine tuning the processes that run, and likely running them repeatedly.  I wanted to find a way to store the results from the OCR for each document, but I am also aware that I can't use the document name and path as the canonical key to find the document later, because the goal of this app is to move them and rename them appropriately!  So I decided to use a hash of the file contents as a key.  `SHA256` seems to be the right algorithm for file contents, low cost computation, low collision chance.  So I created a hash function that calculates the `SHA256` hash of the document after it is read:\n\n```go\nfunc (d *Document) GetHash() {\n\n\tf, err := os.Open(d.Path)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer f.Close()\n\n\th := sha256.New()\n\tif _, err := io.Copy(h, f); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\td.Hash = fmt.Sprintf(\"%x\", h.Sum(nil))\n}\n```\n\nAfter getting the results of the OCR operation, I set them in the `Document` type, then persist the metadata to disk in a hidden directory.  Currently that's `~/.classifier/` but, as with all of this, it might change in the future.\n\nThe file is stored using the `SHA256` hash of the contents as the file name, and the `Document` type is serialized to disk using Go's efficient and lightweight `encoding/gob` format.  While I'm debugging and playing with this code, I decided to also persist the data in `json` format so it's easier to read.  Here's the method on `Document` that saves/serializes to disk:\n\n```go\nfunc (d *Document) SaveMetadata() error {\n  fmt.Println(d.Hash)\n  //TODO use new XDG config dir location\n  // https://tip.golang.org/pkg/os/#UserConfigDir\n\tfilePath := \"/home/bjk/.classifier/\" + d.Hash // TODO FILEPATH.JOIN\n\tfmt.Println(filePath)\n\tfile, err := os.OpenFile(filePath, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer file.Close()\n\tenc := gob.NewEncoder(file)\n\terr = enc.Encode(d)\n\tif err != nil {\n\t\treturn err\n\t}\n\tjfilePath := \"/home/bjk/.classifier/\" + d.Hash + \".json\" // TODO FILEPATH.JOIN\n\tfmt.Println(jfilePath)\n\tjfile, err := os.OpenFile(jfilePath, os.O_TRUNC|os.O_CREATE|os.O_WRONLY, 0644)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer jfile.Close()\n\tjenc := json.NewEncoder(jfile)\n\treturn jenc.Encode(d)\n}\n```\nLots of bad things happening in there, see above caveats about copying/pasting this code.   The important part is the encoding in `gob` format of the contents of the `Document` metadata, which is then saved to disk using the `SHA256` hash as the filename.  This is a nice future-proof solution, and provides several benefits.\n\n* If there is already a file with the same name, it's been processed once.\n* If the `.Path` is different from the document I'm inspecting, I might have an exact duplicate, which is a candidate for (soft) deleting\n* It doesn't matter where the files get moved, as long as the `SHA256` hash matches, I've got the metadata saved already.\n\nThis is a very low-tech metadata database, of sorts.  It's definitely not optimized for real-time use, but instead for batch operations.\n\nKeeping all the metadata in this format means I can write any number of other tools to read and modify the metadata without worrying too much. \n\n### Step Two\n\nAt this point, I have a directory full of unprocessed files and a way to process them once and save the results so I don't have to re-process them later.  It's time to fire off the processing app.  I used [cobra](https://github.com/spf13/cobra) to build the command-line utility, so I made the root/naked command do the actual calls to Azure Cognitive Services:\n\n```bash\ngo build\n./classifier\n```\n\nThis iterates over every file in the `~/Documents/Unfiled` directory, calling Cognitive Services OCR for the file types that are supported.  There is no current mechanism to retrieve metadata from other document types (Word documents, text files, etc).  That's a future addition.\n\nAfter receiving the results, the responses are serialized using the above mentioned `gob` serialization into `~/.classifier/HASH`\n\n### Classification\n\nBased on the results there are some simple `bag of words` matches that can be done.  Some of the documents I have contain very unique text that is indicative of a particular document type.  For example, Bank of America always includes my account number and their address in `Wilmington`.  No other document in my corpus has those two distinct things together, so I can write a simple classifier for all Bank of America documents.  I decided to use simple TOML for a configuration file here:\n\n```\n[[entity]]\nname = \"Bank of America\"\ndirectory = \"BOA\"\nkeywords = [\"Bank of America\",\"12345677889\",\"Wilmington\"]\n```\n\nHere, I added a sub-command in `cobra` so I can classify files without re-posting them to Cognitive Services.  So I added the `classifier process` command:\n\n```bash\n./classifier process\n```\n\nIt currently goes through all the files in `Unfiled` and checks their metadata for matches against the TOML file.   This worked perfectly for several of my external correspondents.  It took all the documents from `Unfiled` and placed them in `Filed/{directory}`.\n\n### What About The Rest?\n\nThere are many documents that aren't easily processed this way though.  My next inspiration came in the shower (of course).  If you squint enough, or are far enough away, all documents from the same entity of the same type look the same.  So all my mortgage statements look the same, but the numbers are different.\n\nI installed ImageMagick, and wrote a script to make a low-resolution thumbnail of each PDF.  I made the resolution low enough that the text isn't readable even if you magnify the image.\n\nThen I searched for ways to compare images and came across [duplo](https://github.com/rivo/duplo), which appears to do what I need.  It does a hash of the image and allows you to compare other documents to that hash to find a similarity score.  Using this type of process my next goal is to group similar documents together by searching for ones with matching or close-to-matching image hashes.  \n\nBut that'll be probably next weekend.   It's been really fun doing this much, and I'm looking forward to seeing how much more I can learn as I go!\n\nIntermediate results:\n\nBefore:\n```bash\n2846 Files\n```\n\nAfter:\n```bash\nUnfiled\\\n  2710 Files\nFiled\\\n  136 Files in 2 Directories\n```\n\n\n\n","published_at":"2019-09-03","created_at":"2020-04-08T13:35:43.838Z","updated_at":"2020-04-08T13:37:50.012Z","category":4,"publication":1,"slug":"Organizing-Documents-with-Some-AI-ML-and-Elbow-Grease","author":1,"excerpt":"In this first post of (likely) a multi-part series I'm going to discuss how I am using machine learning, AI, and good old-fashioned elbow grease to make sense of the 3000 files in my `~/Documents/Unfiled` directory.","published":null,"live":true,"image":{"id":9,"name":"IGa3Md8wP6g.jpg","hash":"ef1b9bd086524852a2b77e2dd61be021","sha256":"P6UHORR_C9c4pHlAGLVGOpgHPuFpixIQSM-sY6w1Qcw","ext":".jpg","mime":"image/jpeg","size":126.93,"url":"/uploads/ef1b9bd086524852a2b77e2dd61be021.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T13:35:43.870Z","updated_at":"2020-04-08T13:35:43.870Z"}},{"id":17,"title":"Retractable Green Screen On the Cheap","content":"\nQuick post to write up how I built a retractable green screen mount on my wall for not much money.\n\nI bought a mounting bracket [from Amazon](https://www.amazon.com/gp/product/B002P32990/ref=oh_aui_detailpage_o02_s01?ie=UTF8&psc=1) that was intended for paper photograph backrounds like this.  I didn't want paper, I wanted muslin for it's superior light disbursement and durability.  I already had a 9' by 15' muslin green screen backdrop similar to [this one](https://www.amazon.com/gp/product/B017WNJS3M/ref=oh_aui_detailpage_o02_s00?ie=UTF8&psc=1).\n\nWhen the mounting bracket arrived, it said to use a metal rod with a 2\" (two inch) inner diameter.  I didn't want to use anything that heavy, so I went to Lowes and found PVC pipe with 2\" inner diameter and bought a 10 foot section.\n\nThen I measured the target wall and found it was 11.5 feet wide, perfect for my install.  I did the math to center the mount on the wall, accounting for the several inches of the pole-mount that stick out from each side.\n\n![Triple Bracket Mounted On The Wall](https://content.brian.dev/uploads/1cd6c8cc640f4866bb2d7c60dd3c5e88.jpeg)\n\nThen to secure the backdrop to the PVC tubing, I reinforced the backdrop with Gorilla tape every 12 inches.  Duct tape or any other strong tape would work fine.  I drilled a hole through the reinforced backdrop and inserted a wood screw and washer to keep the backdrop secured to the PVC pipe.\n\n![Reinforced Fabric with Gorilla Tape](https://content.brian.dev/uploads/989a867e993149b2b61d905d421d0850.jpg)\n\nThe whole thing took about an hour, mostly because it was awkward working with such a wide format project.  I called my kids in randomly to help when I needed an extra set of hands.\n\n![Final Assembly](https://content.brian.dev/uploads/b3000d4f0aaf4ce0a194e6258c73e903.jpeg)\n\nIt was really inexpensive, and I can add two more backdrops in the future if the need arises.  Far better than the $1500+ solutions I found at photography stores, and much less intrusive than the nasty stands that take up too much floor space.\n\n","published_at":"2018-10-06","created_at":"2020-04-08T14:28:10.943Z","updated_at":"2020-04-08T14:28:17.050Z","category":9,"publication":1,"slug":"Retractable-Green-Screen-On-the-Cheap","author":1,"excerpt":"Quick post to write up how I built a retractable green screen mount on my wall for not much money.","published":null,"live":true,"image":{"id":48,"name":"IMG_1380-1.jpeg","hash":"d44eca7292c345b9bdbf45055af291bf","sha256":"VtZ9AIW8CjvPkxzkVYnmgQvI4eEZBENojRFDQtuA6lk","ext":".jpeg","mime":"image/jpeg","size":789,"url":"/uploads/d44eca7292c345b9bdbf45055af291bf.jpeg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:28:10.971Z","updated_at":"2020-04-08T14:28:10.971Z"}},{"id":1,"title":"Byobu on WSL","content":"[Byobu](http://byobu.co/) is a frontend for `tmux` and `screen` that allows you to save your terminal sessions and reconnect to them easily.  It's one of the biggest time-savers in my bag of tricks.  Read along to learn how I use it.  This article applies to any *nix-like system, despite the \"on WSL\" in the title.\n\n### Installing\n\nYou can install Byobu on nearly any *nix-like operating system.  Since I'm using Ubuntu and Debian, I'll use `apt` to install the version that is shipped with the OS:\n\n![Check to see if byobu is installed](https://content.brian.dev/uploads/173cf4ad653544199b18caefb7815fde.png)\n\nOnce installed it's easy to start a session, just type the `byobu` command:\n\n![A new Byobu session](https://content.brian.dev/uploads/35b254fc1bdd44da99f03daa89204969.png)\n\n### Enabling\n\nYou can continue to use `byobu` this way, manually, but the real power of `byobu` comes by enabling login/ssh integration.  From your shell prompt, type the command `byobu-enable`.  This will enable a wrapper script that wraps your login session with a `byobu` session.  You can disable this with `byobu-disable`.\n\nWith `byobu` in \"enabled\" mode, every time I open a terminal it drops me into either an existing `byobu` session if one exists, or creates a new one for me.  It's a delightful way to resume where I left off without having to worry about whether I started a `tmux` session.\n\n### Usage\n\nIn stark contrast to `tmux` and `screen`, `byobu` is pretty easy to use.  By default it uses mostly function keys to manage your session.  In the background, `byobu` issues appropriate commands to `tmux` or `screen` on your behalf, so you don't have to remember those crazy control sequences.\n\n#### Windows\n\nOnce inside a `byobu` session, you can create multiple windows inside your terminal session.  If you've used a terminal client that supports tabs, this isn't much different.  The benefit is that your windows are persisted with your session.  So you can exit and resume your session with all your windows intact.\n\n![A single byobu window](https://content.brian.dev/uploads/d24d31e5e6954e86bd3f2cf934a0140e.png)\n\n\nWindows are labeled with a number in the status bar at the bottom of the screen.  Press `F2` to open a new window and you should see a second terminal appear:\n\n![A second byobu window](https://content.brian.dev/uploads/afd632e1757c4c7eb4ca3eb1182f79dc.png)\n\n\nNow I have two windows open, labeled `0:neovim` and `1:` in the taskbar.  I skipped a step here and renamed my original window so I wouldn't get lost when I add more than one.  Press `F8` to rename a window.  Note that the window name is just for decoration, it doesn't relate to running processes at all.\n\nTo navigate between your windows, use `F3` and `F4` for previous and next windows.\n\n#### Splits\nSometimes, I like to have two different terminal applications running in one window.  For example, when editing this blog:\n\n![A split window](https://content.brian.dev/uploads/655ad82918be46578b16176f2310b052.png)\n\n\n\nThe top part of the split has `neovim` editing the content of this post.  The bottom part of the split is the output of `hugo` as it watches the content directory.\n\nCreate a split by using `Shift F2` and `Control F2` for horizontal and vertical splits, respectively.\n\nI can change back and forth between splits using `Shift + F3` and `Shift + F4`.  That's easy to remember, because it's just adding `Shift` to the keys I use to change windows.\n\nResizing splits is accomplished with `Shift + Alt + [arrow key]`\n\n#### Closing the Terminal\n\nWhen I'm done working in the terminal, but not finished with a particular task, I use `F6` to detach from the `byobu` session.  This closes the active terminal window, but keeps `byobu` and all my windows running in the background.  Reoping my terminal window automatically re-attaches me to my `byobu` session as if I had never left.\n\n### Reference / Links\n\nAdding `byobu` to my toolbelt drastically cut the amount of time it takes to engage with a project I need to walk away from. I have a hard time guessing, but I think I'm saving an hour or more per week at a minimum.  That's a lot of time.\n\n\n* [Ubuntu Wiki: Byobu](https://help.ubuntu.com/community/Byobu)\n* [Byobu Documentation](http://byobu.co/documentation.html)\n","published_at":"2019-10-09","created_at":"2020-04-06T15:01:45.956Z","updated_at":"2020-04-08T13:49:28.936Z","category":1,"publication":1,"slug":"Byobu-on-WSL","author":1,"excerpt":"Byobu is a frontend for `tmux` and `screen` that allows you to save your terminal sessions and reconnect to them easily.  It's one of the biggest time-savers in my bag of tricks.  Read along to learn how I use it.  This article applies to any *nix-like system, despite the \"on WSL\" in the title.","published":null,"live":true,"image":{"id":17,"name":"mbLr6NEatMI.jpg","hash":"9e06273c9ca041cabe7c91d3c1e56698","sha256":"ePG55rzFZGjvRWTetTpkLaIl2wX22aCYnq_jR8EXu7I","ext":".jpg","mime":"image/jpeg","size":100.47,"url":"/uploads/9e06273c9ca041cabe7c91d3c1e56698.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T13:49:28.955Z","updated_at":"2020-04-08T13:49:28.955Z"}},{"id":15,"title":"Old Dogs, New Tricks, and Cognitive Bias","content":"For 15 or more years I have told myself that I can't do frontend web work.  I remember seeing a presentation from a co-worker on CSS in 2003 or so, and thinking it was just too complicated.  I've always been the guy behind the scenes building the services that power the web, but never the one spending any time making them less ugly.<!--more-->\n\nI know basic HTML -- from the roughly the [HTML 4.01 era](http://www.yourhtmlsource.com/starthere/historyofhtml.html). My excuse has always been that this is enough to create the sort of user interfaces I've been required to create.  Simple admin screens, simple tabular reports, those sorts of things.  I was able to avoid learning any more complex frontend skills over the years by simply shrugging and saying \"I don't know frontend\". \n\nI've recently started working on [Congo](https://github.com/gopheracademy/congo) again, in an effort to simplify the piles of spreadsheets, notes, emails, and TODO lists that pile up on conference organizers. Congo will provide an API for clients to consume, and will require a web interface for management. It's time to finally buckle down and learn some basic frontend development skills.\n\nI'm not trying to minimize my abilities, or pretend that I have *no* capabilities. I've made modifications to existing React and Angular applications before. I've changed and tweaked a few CSS styles to get a desired effect. But it's not a place that I'm comfortable, and not a place I can start from scratch. I need someone else to set it up and do the hardwork so I can make the small changes. So you can think of me as a Junior Frontend Developer, but without the hoodie and expensive coffee. \n\nI know that there is nothing preventing me from being a capable frontend developer other than my own bias and laziness. So today I'm making the commitment to learn more. I'll be writing about it here, so follow along and enjoy the laughs. If you have tips and tricks - send them to me on [twitter](https://twitter.com/bketelsen) or follow me there for regular updates.\n","published_at":"2016-06-13","created_at":"2020-04-08T14:21:29.744Z","updated_at":"2020-04-08T14:23:57.971Z","category":null,"publication":1,"slug":"Old-Dogs-New-Tricks-and-Cognitive-Bias","author":1,"excerpt":"For 15 or more years I have told myself that I can't do frontend web work.  I remember seeing a presentation from a co-worker on CSS in 2003 or so, and thinking it was just too complicated.  I've always been the guy behind the scenes building the services that power the web, but never the one spending any time making them less ugly.","published":null,"live":true,"image":{"id":42,"name":"photo-1476873064915-2f5cde044a5d.jpg","hash":"4bf3e0a2fedc4f02afdd996aea3daf8f","sha256":"9bc1HzjGsdTx_jrXvSp9gu3i4--tCcTeJG7aRewbZ+4","ext":".jpg","mime":"image/jpeg","size":99.81,"url":"/uploads/4bf3e0a2fedc4f02afdd996aea3daf8f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:21:29.761Z","updated_at":"2020-04-08T14:21:29.761Z"}},{"id":9,"title":"Getting Crazy with Windows Subsystem for Linux","content":"\nLately I've been on a [mission](https://blog.gopheracademy.com/advent-2017/repeatable-isolated-dev-environments/) to separate my development environments by project, and by category (personal/work/Gophercon/etc).  The writeup on the Gopheracademy blog describes a fun way to create an isolated container-based environment for each project by using LXD on Ubuntu.\n\nLast night I wondered to myself if there was a way to get a similar experience by manipulating [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/faq) somehow.  That was a rabbit hole of searching, let me tell ya true.\n\nSince the [Fall Creator's Update](http://www.zdnet.com/article/windows-subsystem-for-linux-graduates-in-windows-10-fall-creators-update/) WSL has had more than one distribution available to install.  You can install SUSE, Ubuntu, and soon Fedora.  So deep down in my soul, I KNOW that I can have multiple copies of Ubuntu running with separate filesystems.  That would reproduce the LXD environments I created in Linux.\n\nAfter some research, it turns out that the WSL management API is available in the Windows SDK, and several projects already take advantage of this fact.  First I found [this one](https://github.com/yuk7/WSL-DistroLauncher) which allows you to do a lot of work and install any Linux distro you want.  I knew I was on the right track.  My next big find was [LxRunOffline](https://github.com/DDoSolitary/LxRunOffline) which was built to allow you to install WSL without being online.  It also has the secondary ability to let you install any number of WSL instances.  Now we're cooking with gas!\n\nI downloaded `LxRunOffline` and read the [wiki](https://github.com/DDoSolitary/LxRunOffline/wiki/Ubuntu), which has links to the Ubuntu root filesystem that is installed during a regular WSL install.  Following their instructions, I downloaded the rootfs, put it next to the `LxRunOffline` binary, and installed *another* copy of Ubuntu as a new WSL instance.  \n\n```\nLxRunOffline 2.1.1\nCopyright (C) 2017 DDoSolitary\n\nERROR(S):\n  No verb selected.\n\n  list                List all installed distributions.\n\n  default             Get or set the default distribution, which is used by bash.exe.\n\n  install             Install a new distribution.\n\n  register            Register an existing installation directory.\n\n  uninstall           Uninstall a distribution\n\n  unregister          Unregister a distribution but not delete the directory containing it.\n\n  move                Move a distribution to a new directory.\n\n  run                 Run a command in a distribution.\n\n  dir                 Get the installation directory of a distribution.\n\n  config-env          Get or set the default environment variables of a distribution. (Currently unusable because of a problem of the command line\n                      parser library.)\n\n  config-uid          Get or set the UID of the default user of a distribution.\n\n  config-kernelcmd    Get or set the default kernel command line of a distribution.\n\n  config-flag         Get or set some flags of a distribution. See https://msdn.microsoft.com/en-us/library/windows/desktop/mt826872(v=vs.85).aspx for\n                      details.\n\n  help                Display more information on a specific command.\n\n  version             Display version information.\n\n\nC:\\Users\\bkete\\Downloads\\LxRunOffline-v2.1.1\\LxRunOffline-v2.1.1>\n```\n\n\n\n*SuccessKid.jpg*\n\nI repeated this process several times until I had enough instances of WSL for my current project load, each time putting the storage folder in a new path named for its usage -- like `c:\\microsoftfs` or `c:\\gopherconfs`.\n\nThe last step was to figure out how to launch them.  I use [wsltty](https://github.com/mintty/wsltty) sometimes as my terminal emulator, and it comes with convenient batch files to launch WSL as a user, as root, and other scenarios.  I copied one of those batch files and modified it to point to one of my new Ubuntu instances like this:\n\n### Original\n```\n%LOCALAPPDATA%\\wsltty\\bin\\mintty.exe -i \"%PROGRAMFILES%/WindowsApps/CanonicalGroupLimited.UbuntuonWindows_1604.2017.922.0_x64__79rhkp1fndgsc/images/icon.ico\" --WSL= -h err --configdir=\"%APPDATA%\\wsltty\"  -~  \n```\n\n### Modified\n```\n%LOCALAPPDATA%\\wsltty\\bin\\mintty.exe -i \"%PROGRAMFILES%/WindowsApps/CanonicalGroupLimited.UbuntuonWindows_1604.2017.922.0_x64__79rhkp1fndgsc/images/icon.ico\" --WSL=\"Gophercon\" -h err --configdir=\"%APPDATA%\\wsltty\"  -~  \n```\n\nIn the modified batch file, the `--WSL=\"Gophercon\"` references a registered WSL distribution called `Gophercon` which I created with `LxRunOffline`.  I repeated this process for each of the new instances, and changed the icons for them so I can launch them easily from the start menu.\n\nNow I have multiple installations of WSL/Ubuntu that are isolated from each other.  Exactly what I wanted.  The development workflow is nearly identical to the Linux/LXD version, I open a terminal and start coding.  \n\nThe end result is that each WSL Ubuntu installation has a separate filesystem, so each project is isolated.  Using [yadm](https://thelocehiliosan.github.io/yadm/) I can clone my [dotfiles](https://github.com/bketelsen/dotfiles) and run the included `bootstrap` script which updates the system and installs all the packages I need for development with a single command.  That's quick and easy.\n\nWindows looks better and better for Linux development.  And the webcam always works...\n\n:)\n","published_at":"2017-12-13","created_at":"2020-04-08T14:05:52.202Z","updated_at":"2020-04-08T14:05:52.209Z","category":1,"publication":1,"slug":"Getting-Crazy-with-Windows-Subsystem-for-Linux","author":1,"excerpt":"Lately I've been on a [mission](https://blog.gopheracademy.com/advent-2017/repeatable-isolated-dev-environments/) to separate my development environments by project, and by category (personal/work/Gophercon/etc).  The writeup on the Gopheracademy blog describes a fun way to create an isolated container-based environment for each project by using LXD on Ubuntu.","published":null,"live":true,"image":{"id":24,"name":"startmenu.png","hash":"f51e0f5db0fe489db7031d4050dd1863","sha256":"Y4MRPFbch9pxTSgFuLVBIjE_cihDCx8jr2Y8827xH6U","ext":".png","mime":"image/png","size":173.28,"url":"/uploads/f51e0f5db0fe489db7031d4050dd1863.png","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:05:52.234Z","updated_at":"2020-04-08T14:05:52.234Z"}},{"id":14,"title":"New Tricks - notes as I learn modern front-end development","content":"\nI promised [here](https://brianketelsen.com/opensource/) that I would document my progress learning frontend development.  This isn't a book-length treatise on the subject, but I do have a few notes about my progress.  <!--more-->It's been a little overwhelming going from zero to having an idea about what I'm doing.  Many other people have mentioned it, so I won't belabor the point -- the Javascript ecosystem is huge and confusing.  Seriously.\n\n> I played with several different frameworks with varying results.  I'm not sure whether my success and/or appreciation of the frameworks is based on my bias and previous learnings, but some are much easier than others to pick up.\n\n* React - I really like React as a concept -- at least what I _understand_ of the concept of React.  I have had the most success with React, and accomplished the most here. I really love mixing inline markup with code.  That's nice and feels comfortable.  Seems like there are too many ways to put together a React project and it felt like the heaviest of all of the things I tried.  Still probably my favorite, though.\n* Polymer - The Polymer project appeals to me because of the nice UI components, but I had a harder time here due to the lack of documentation and sample projects that I can learn from.  I still had moderate success, but it wasn't as easy to understand as React was, especially around how to tie things together using events.\n* Vue.js - Vue.js looks nice, but I disliked the strange decoration syntax, which reminds me a bit of Angular.  I tried a little \"hello world\" app and abandoned it due to my distaste for the syntax and concepts.\n* Mithril - This one looks really promising, and felt the \"lightest\" of all of the frameworks I tried.  I really disliked the process of assembling the views with javascript functions rather than inline markup (React style).  That feels so clunky. Maybe there is a way to use templates, I didn't investigate enough.\n\nOverall, I did make quite a bit of progress on the Javascript side of the equation.  I'll keep experimenting and learning.  I know I said I wouldn't belabor the point, but do we really need NPM, Webpack, Grunt, Gulp, Bower and all the rest of this mess just to build a web app?  I am really unsure of what each of them is supposed to do and where they fit -- which are complementary and which aren't.  Seems strange to have a project with bower dependencies and npm dependencies vendored in two different folders.  And I never did figure out by looking at the configuration files how the app knows where to find those vendored libraries.  Too much magic.\n\nAs I get more comfortable, I think I'd like to try doing some things with just jQuery or backbone.js - something much lighter and farther down the framework stack to see how it feels.  Would love recommendations if you have any.  \n\nIt hasn't been as hard as I thought it would be.  It hasn't really been *fun* either, though.  I suspect with time I'll be more comfortable and I continue to press myself to learn.  Thanks for following along.\n\nPost Script:\nI've done each of these test projects using either Javascript or TypeScript, but where possible I also did a version using [GopherJS](http://www.gopherjs.org) which I found to be really fun.  I have decided not to do my learning using GopherJS because it is an additional layer of translation that is causing me more mental load than it should.  I really love that project though, and when I'm feeling stronger in the JS world, I'll move back to GopherJS because it still feels like home.  The people in the GopherJS community have been awesome - Luna Duclos, Dominik Honnef, Dmitri Shuralyov, and Bjorn Erik Pedersen have had a tremendous amount of patience with me.  Many thanks!\n","published_at":"2016-05-04","created_at":"2020-04-08T14:20:28.443Z","updated_at":"2020-04-08T14:23:57.971Z","category":null,"publication":1,"slug":"New-Tricks-notes-as-I-learn-modern-front-end-development","author":1,"excerpt":"I promised that I would document my progress learning frontend development.  This isn't a book-length treatise on the subject, but I do have a few notes about my progress.  ","published":null,"live":true,"image":{"id":41,"name":"photo-1485873402302-54d29627d4dc.jpg","hash":"864b0e1dbe2d4997a730e9b6e353b68a","sha256":"JD2wUlqxGXZnbQi5n-alTxO2dewp95nxHr5Xw-wg-q0","ext":".jpg","mime":"image/jpeg","size":134.08,"url":"/uploads/864b0e1dbe2d4997a730e9b6e353b68a.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:20:28.470Z","updated_at":"2020-04-08T14:20:28.470Z"}},{"id":23,"title":"Windows for Open Source Development","content":"\n## A Guide for Open Source Developers Moving To Windows\n\nI've long used macOS or Linux when I make my Open Source contributions, but I think that the time is right to try Windows as a full-time development environment.  If you want to jump on board, this article series is for you!\n\nIn this first article we'll start with the installation and configuration of the Windows Subsystem for Linux, and get you to the point where you can clone and compile/run your OSS projects.\n\nThe series will continue with other articles and advice on using Windows as your daily driver if you're used to macOS or Linux desktops.\n\n### Preface\n\nIn a discussion with [Rob Conery](https://twitter.com/robconery) I made the bold statement that with the addition of the [Windows Subsystem for Linux 2(WSL2)](https://docs.microsoft.com/en-us/windows/wsl/wsl2-about) there were no blockers for the average Open Source developer to use Windows as a daily driver.\n\nTo put my money where my mouth is, I've (personally) purchased a [Surface Laptop 3](https://www.microsoft.com/en-us/surface/business/surface-laptop-3), and I'm going to use it as my daily workhorse for the next 30 days.  We'll call it the #30DayWSLChallenge.\n\nFind other articles in this series [with this link](/tags/30daywslchallenge/).\n\n### Assumptions\n\n_This guide is for you if you're traditionally a macOS or Linux desktop user and you're looking for information on how to use a Windows 10 device with Windows Subsystem for Linux as your primary development environment._\n\n  - I’m assuming you’re coming from a *Nix system like MacOS or a Linux distribution\n  - I’m assuming you’re looking for a setup on Windows that feels like the dev environment that you already have\n  - I’m assuming that you’re familiar with the bash or zsh shell, and have basic skills on the command line\n  - I'm assuming that you're open minded enough to stay with the switch beyond the first few days of discomfort with something new\n\n\n## Getting Started\n\nAs an open source developer, almost all the projects I work on are best developed on Linux.  My goal in this guide is to set up a modern Windows 10 environment that rivals the development experience on Linux while providing the comforts of a mainstream operating system.  And by \"comforts\" I mean things like working audio, long battery life, and stable office suites.  Linux has come a *long* way, but it's still hard to make it a daily driver for most people.\n\n## Installation\n\nAfter unboxing your new laptop the first thing to do is rename it.  Windows comes with a randomly generated host name by default.  Yuck!\n\n*  Rename your PC\n\n`Desktop-R4NDH3X` isn't my speed.  When it asks you to reboot, you can choose the \"later\" option, we have plenty of rebooting coming up.  \n  \nGo to `Start > Settings > System > About` and click the `Rename this PC` button.  I like to name my computers after [planets in the Dune series of novels](https://dune.fandom.com/wiki/Category:Planets), but you do you...\n\n![Rename PC](https://content.brian.dev/uploads/7b80c25d735a4fac8086a4ea71d08f7f.jpg)\n\n* Move to Windows Insider to get beta builds.  \n\nOpen the Start Menu, then choose Settings, then Update & Security\n\n![Insider](https://content.brian.dev/uploads/77cf4c1d4399482caf61721d202e4dce.png)\n\nAdd or link an account, and set up [Windows Insider](https://insider.windows.com/en-us/) preferences to be either [\"Slow Ring\" or \"Fast Ring\"](https://insider.windows.com/en-us/how-to-pc/#about-rings) to enable WSL2.  Enabling Windows Insider will require a reboot.  Slow ring is the minimum required for WSL2 (build 18917 or higher), Fast ring has all the latest features and potentially some bugs that could prevent you from being productive.  Use your judgement to choose which to install based on your tolerance for risk.\n\n* Windows Update\n\nNow go into Windows Update and get the updates.   One of them will be the version that enables WSL2.  When all your updates are installed you can proceed.\n\n* Install the new Microsoft Edge (optional, but awesome)\n\nHead to the [edge download site](https://www.microsoft.com/en-us/edge) and install the new version of Microsoft Edge.  It's based on Chromium and a lot nicer than the older Edge.  Be sure to checkout the multiple profile support.  I have profiles for different contexts (work, banking, personal) and really enjoy the separation of cookies.\n\nIt will be automatically installed after an update or two, so this isn't critical, but it's nice to get it out of the way up front.\n\n* Install the features to enable [WSL2](https://docs.microsoft.com/en-us/windows/wsl/wsl2-install)\n\nOpen PowerShell as an Administrator:\n\n![Elevated Access Powershell](https://content.brian.dev/uploads/579086cc6aa440e4944b4ddd14ccf3a0.png)\n\nrun these two commands:\n\n```\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\t\t\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\nThis enables the Virtual Machine Platform, which gives us the hypervisor from HyperV without installing HyperV. It is also available on Windows 10 Home, which has previously been a blocker for developers who want to run Docker, etc, on Windows 10 Home edition.\n\n* Microsoft Store\n\nOpen the Microsoft Store app and install any updates that are pending.  If you want to use X11 applications from WSL you'll need an X server too.  I use [X410](https://token2shell.com/x410/) and heartily endorse the purchase if you can catch it ON SALE, like it is now for $9.99 US.  Don't pay full price though, there are others that are available if X410 isn't on sale.\n\nBefore we install a Linux distribution in WSL, let's go ahead and make WSL 2 our *default* per the [Installation Instructions for WSL 2](https://docs.microsoft.com/en-us/windows/wsl/wsl2-install). If we don't do this we risk running WSL 1 accidentally and WSL 2 has *much* better performance. Let's open a terminal and run:\n\n```\nwsl --set-default-version 2\n```\n\n\nInstall [Ubuntu](https://www.microsoft.com/store/productId/9NBLGGH4MSV6) from the Microsoft Store.  Don't pick a versioned app, just choose the `Ubuntu` app without a version.  It follows LTS.\n\n![Ubuntu](https://content.brian.dev/uploads/2362f22f12c646bfb07c124764f7a75a.png)\n\nInstall [Windows Terminal](https://www.microsoft.com/store/productId/9N0DX20HK701).  The new Windows Terminal is a solid terminal emulator, and you'll feel at home here if you're used to iTerm2 or Gnome Terminal.  I didn't mark this as optional, because you're used to using a real terminal, and Windows Terminal is the only thing that will satisfy you.  Trust me on this.\n\n![Windows Terminal](https://content.brian.dev/uploads/f24aa468ca264274b2db1464b32b5a24.png)\n\n* Open the `Ubuntu` app from your Start menu\n\n![ubuntu](https://content.brian.dev/uploads/e0a6ef85198844cfaa11fd0cec5868b5.png)\n\nAfter a moment, it will ask for a username and password.  These are your credentials inside the Linux world.  You can choose any *nix friendly username.\n\n![success](https://content.brian.dev/uploads/fbf8b01600024347a11ead81c2693ee5.png)\n\n* Download and install Visual Studio Code\n\nGo to [the VS Code website](https://code.visualstudio.com/Download) and download it.  Install it when the download is complete.\n\n* Pin VS Code and Windows Terminal to your start menu (and maybe your taskbar)\n\n![pin](https://content.brian.dev/uploads/fe4e2e76f9064f4e81f7ab906832c943.png)\n\n* Install the Remote WSL extension in Visual Studio Code which is part of the [VS Code Remote Development extension pack](https://code.visualstudio.com/docs/remote/remote-overview#_remote-development-extension-pack)\n\n![remote](https://content.brian.dev/uploads/19e036e535fd44acaef581ec6a7ee02f.png)\n\n* Configure Windows Terminal\n\nOpen Windows Terminal, then click the \"down arrow\" next to the new tab button.  Choose \"Settings\".\n\nFind the stanza with your \"Ubuntu\" installation and copy the `guid`.  Paste it into the value for \"defaultProfile\" at the top of the settings file.\n\n![default](https://content.brian.dev/uploads/e79496aaee6942aeba2e7efa4b976ac7.png)\n\nWhile you're in there, download [Cascadia Code PL](https://github.com/microsoft/cascadia-code/releases) and install it (by double-clicking on the ttf file).  Edit your \"Ubuntu\" profile in the Windows Terminal settings to use the new font:\n\n```\n\t{\n            \"guid\": \"{2c4de342-38b7-51cf-b940-2309a097f518}\",\n            \"hidden\": false,\n            \"name\": \"Ubuntu\",\n            \"source\": \"Windows.Terminal.Wsl\",\n            \"startingDirectory\": \"//wsl$/Ubuntu/home/YOURUSER\",\n            \"fontFace\": \"Cascadia Code PL\",\n            \"fontSize\": 12,\n        },\n```\n\nFinally, change your starting directory too, by modifying the \"startingDirectory\" value.  Change `YOURUSER` to the username you chose when you installed WSL.  Mine was `bjk`.  If you don't do this, WSL will start up in your Windows User profile directory, which will be mighty confusing since it's not `$HOME`.\n\n### Sidebar\n\nIn the last step we set the starting directory for Windows Terminal's Ubuntu instance to `//wsl$/Ubuntu/home/bjk`.  This is an awesome little trick you can use from the Windows side of things to browse your WSL file system.   Sometimes Windows Explorer is much easier than using some bash commands to move files around.  Speaking of bash commands, by default your `C:\\` drive is mounted in WSL at `/mnt/c`.  How awesome is that?  You can do all kinds of crazy things using these interop tricks.  See the references and links below for more.\n\nTo navigate there directly enter `\\\\wsl$` in the address bar of Windows Explorer:\n\n![Windows Explorer](https://content.brian.dev/uploads/45158d35529547dc891d389dfa72533b.png)\n\n### Continuing On...\n\n* Install your dotfiles\n\nMine are on [Github](https://github.com/bketelsen/dotfiles).  I created a `git.io` shortcut so I could curl | bash install them.  Install yours however you're accustomed.  If you're searching for options, I am enjoying [chezmoi](https://github.com/twpayne/chezmoi) these days, my repo is a good starting point, showing how you can do different installation tasks by operating system.\n\nNote that WSL is just Linux, Ubuntu to be precise (get that??).  You shouldn't have to modify anything if your dotfiles are already Linux-friendly.\n\n### Docker\n\nRecently [Docker announced](https://docs.docker.com/docker-for-windows/wsl-tech-preview/) a version of Docker Desktop that works very nicely with both the Windows and WSL sides of your development.  Impressive reading in that link if you're interested in the technical details.  Follow the directions in that link to install and enable WSL2-friendly Docker Desktop.\n\n![Docker from Both Sides](https://content.brian.dev/uploads/59801cb4551048c48140e9f8f5ba0390.png)\n\nYou can even just [install Docker Engine - Community for Ubuntu](https://docs.docker.com/install/linux/docker-ce/ubuntu/) right inside WSL, if you prefer.\n\nFinally, once we have WSL setup the way we'd like, we can export and import our distro(s) to or from a tar file using the [following commands](https://docs.microsoft.com/en-us/windows/wsl/reference#arguments-for-managing-windows-subsystem-for-linux):\n\n```\nwsl --export <Distro> <FileName>\n\nwsl --import <Distro> <InstallLocation> <FileName>\n```\n\nThis allows you to move a WSL installation to a new computer if necessary, or just keep a backup somewhere safe.\n\n### Integrations\n\nIf you're in the terminal in a directory you want to edit, you can type `code .`, which will open Visual Studio Code on the Windows side (!! right?? !!) and install the \"Remote WSL\" extension for you.  Crazy awesome stuff.\n\n## Conclusion\n\nFrom here you are ready to clone a repo and start making changes.  Follow along [here](/tags/30daywslchallenge/) as I add more tips and tricks that I discover on my journey to reduce the number of physical and virtual computers required to do my job.\n\n## References and Further Information\n\n* [WSL Tips and Tricks](https://wsl.dev)\n* [Awesome WSL](https://github.com/sirredbeard/Awesome-WSL/blob/master/README.md)\n* [Windows Subsystem for Linux Documentation](https://docs.microsoft.com/en-us/windows/wsl/about)\n* [All WSL distributions in the Microsoft Store](https://aka.ms/wslstore)\n","published_at":"2020-02-24","created_at":"2020-04-08T14:45:30.420Z","updated_at":"2020-04-08T14:45:30.425Z","category":1,"publication":1,"slug":"Windows-for-Open-Source-Development","author":1,"excerpt":"I've long used macOS or Linux when I make my Open Source contributions, but I think that the time is right to try Windows as a full-time development environment.  If you want to jump on board, this article series is for you!","published":null,"live":true,"image":{"id":75,"name":"h3GAGi5tXMU.jpg","hash":"dcfd43df952b4874ace2f154c45cc82f","sha256":"R2Vga2TsufVhczmS1BFqA-7fz7Xaj83WuqmbIvsXsDA","ext":".jpg","mime":"image/jpeg","size":152.35,"url":"/uploads/dcfd43df952b4874ace2f154c45cc82f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:45:30.443Z","updated_at":"2020-04-08T14:45:30.443Z"}},{"id":19,"title":"Switching - Irony and Operating Systems","content":"\nTLDR; I've traded in my Mac on a Surface Pro.  Here's why:<!--more-->\n\nI've been whining about Apple and the way they've ignored the power users for quite some time now.  I've been using Linux for development for several years, and always wanted a way to run Linux as my primary OS.  But the sad truth (for me) is that there are just some things that prevent me from using Linux as my full time operating system.  Email might be the biggest, but there are other apps that are missing or just sub-par.\n\nMacOS was always \"close-enough\" to Linux that most things worked well.  Docker made things a little more difficult initially, then a little better with the new Docker for Mac.  But it still wasn't Linux, and it's hard to argue that developing on the platform you ship to is the right choice.  The OS itself is still visually superior to anything else, but it's been showing the signs of neglect for a few years now.  It's clear from Apple's recent announcements that they are a mobile OS/hardware company that happens to sell computers too.  They're not sad to lose me, I'm sure.  \n\nMy article in July about [Windows Subsystem for Linux](/blog/i3-windows/) hinted at my excitement about being able to run a solid desktop OS but still do the open source sort of development that really needs to be done on a Linux type operating system.  I abandoned that effort in July because it was still too alpha quality.  Too many things didn't work.  But it's November now, several builds later and Microsoft is shipping Ubuntu 16.04.1 in the latest Windows Insider releases.\n\nI took the plunge and bought a Surface Pro 4 when Microsoft announced the trade in program (still good until the 10th of November I think...) to give up to $650 off of a Surface device.  This Surface is just the right size for an airplane tray, has an i7 and 16GB of RAM, and most importantly the Linux subsystem just works for the most part.  I haven't done anything yet that failed.  I'm sure there are still things that won't work, but for my primary use -- writing Go applications, teaching Kubernetes and Go, hacking on open source projects -- it all works.\n\nI was even able to run i3 Window manager again.  No flaws, no errors.  Windows has solid email and calendar applications, and let's face it; Chrome is Chrome on every OS, and we spend more time there than any other app besides the terminal.  SPEAKING OF THE TERMINAL, Microsoft has done some serious house cleaning there.  The terminal is fast, has true color support, transparency, auto layout correction on resizing, who knows what else has been fixed under the covers?  It's 80% of what you'd expect from gnome-terminal.  And that's a far cry from the old CMD.exe days.\n\nI don't expect to be running X Windows often, when I'm deep in a hacking session I'll probably open up i3 window manager, it's still the most productive way to code.  Neovim and vim-go work perfectly in Windows bash, so it's not a stretch to think I could just have a couple of bash windows open and alt-tab between them.  SSH and SCP work perfectly, and I can still cross-compile Go binaries for any platform (like my Raspberry Pi for my bbq app!). \n\nThe most amazing part of all of this is that I simply git cloned my [dotfiles](https://github.com/bketelsen/dotfiles) from my Ubuntu installs and ran them un-altered.  It's the same experience, but without the hardware headaches that Linux always brings, nor the lack of good quality applications.  \n<hr/>\nI think Apple has lost its hunger, and Microsoft found it.  The tables have turned from the funny switching campaigns with Justin Long looking hip and making fun of the frumpy John Hodgman.  Today's Microsoft is a completely different animal.  They're contributing heavily to open source projects, they've opened up the .Net platform, they're embracing developers and open source enthusiasts openly while Apple counts dollar bills from iPhone sales in a vault in Switzerland somewhere.\n\nI got a lot of amused responses on Twitter when I announced my switch.  This environment may not yet be perfect, but my bet is on Microsoft for the future.  I'm surprised to be saying that, but the evidence is clear that Apple isn't the company it was under Steve Jobs.  And Microsoft isn't the company it was under Balmer.  The irony hurts.  \n\n[image credit wikipedia](https://en.wikipedia.org/w/index.php?curid=26608065)\n","published_at":"2016-11-07","created_at":"2020-04-08T14:33:55.316Z","updated_at":"2020-04-08T14:33:55.321Z","category":1,"publication":1,"slug":"Switching-Irony-and-Operating-Systems","author":1,"excerpt":"TLDR; I've traded in my Mac on a Surface Pro.  Here's why:","published":null,"live":true,"image":{"id":57,"name":"getamac.png","hash":"491f01dbe9a745aeba4d880c28550af6","sha256":"m3Dh4EaqPp3trl0TqdWXNmFlmvYnGPNEuVEV5vTX6QE","ext":".png","mime":"image/png","size":194.56,"url":"/uploads/491f01dbe9a745aeba4d880c28550af6.png","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:33:55.341Z","updated_at":"2020-04-08T14:33:55.341Z"}},{"id":21,"title":"VS Code Remote Development","content":"\n\nThe [Visual Studio Code](https://code.visualstudio.com/) team just [announced](https://cda.ms/RN) perhaps the most eagerly anticipated feature yet.  Remote editing.\n\n[Twitch Stream - Mac to SSH](https://www.twitch.tv/videos/419428954##)\n[Twitch Stream - WSL & Containers](https://www.twitch.tv/videos/419800747)\n\n### Remote Editing\n\nAn [extension pack](https://aka.ms/VSCodeRemoteExtensionPack) was released today that consists of three related extensions to Code.\n\n* [Remote - WSL](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl)\n* [Remote - Container](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)\n* [Remote - SSH](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh)\n\nThese extensions enable development from a local VS Code instance against a remote environment.  And they're a dream come true for me.\n\nEach of these extensions allows you to run VS Code on `some computer` but the code and tools are on `some other compute device`.\n\n#### Remote - WSL \n\nIf you're a Windows user, you know the frustration of working on a project that expects to be developed in Linux.  There are hacks and workarounds for using VS Code in Windows and keeping the development tools in WSL, but the [remote-wsl](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl) extension solves this problem officially.  You use Code in Windows, but the dev tools and environment live in WSL.  Talk about the best of both worlds!\n\n#### Remote - Container\n\nWith the [remote-containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) plugin, you add a Dockerfile and a configuration file to your project and VS Code will automatically prompt you to spin up the container as your development environment.  It will mount your code inside the container, and run as if you are developing inside the target environment. \n\nThis is the `perfect` way to ship a pre-configured development environment for an Open Source project, for example.  I'm really excited to add this to several of my projects.\n\n#### Remote - SSH\nOf the three, I will probably use this one the most.  In fact I'm using it to write this blog post.\n\n![remote-ssh](https://content.brian.dev/uploads/afdd188f9ccd4adda98409d7f01645b5.png)\n\nThe [remote-ssh](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh) extension uses an SSH client on the host to communicate with a remote computer.  If you have a beefy development machine (either locally or in the cloud), this is the perfect way to keep your development experience stable no matter what computer you're sitting at.  No more syncing unfinished code between machines for me.\n\nThe extension even does port forwarding over your ssh connection.  When you start your website or service, it will forward that port for you to the local machine.\n\n![remote-menu](https://content.brian.dev/uploads/574d06da72da4c9892a9fc3d4f0543db.png)\n\nI've been using the preview version of these three extensions for a few weeks now, and I couldn't be happier with the setup.  I've used them from a Mac, from a Chromebook with Crostini, from Linux, and from Windows.  It works equally well across all platforms.\n\nGo forth and remotely develop!\n","published_at":"2019-05-02","created_at":"2020-04-08T14:37:27.439Z","updated_at":"2020-04-08T14:37:27.446Z","category":1,"publication":1,"slug":"VS-Code-Remote-Development","author":1,"excerpt":"The [Visual Studio Code](https://code.visualstudio.com/) team just [announced](https://cda.ms/RN) perhaps the most eagerly anticipated feature yet.  Remote editing.\n","published":null,"live":true,"image":{"id":61,"name":"fpoHihXiMhg.jpg","hash":"bcf0ca90ceed4fc1ae16fac7b13bbaa2","sha256":"DGK24bs9D_dVY1-NOPlwcMdmwnOWQYwZVnrByI65u0w","ext":".jpg","mime":"image/jpeg","size":315.79,"url":"/uploads/bcf0ca90ceed4fc1ae16fac7b13bbaa2.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:37:27.465Z","updated_at":"2020-04-08T14:37:27.465Z"}},{"id":22,"title":"Web Assembly and Go: A look to the future","content":"\nIt's no secret that I'm resistant to learning Javascript and frontend development.  I learned HTML back before CSS was even a thing, and even Javascript came long after I started doing web development.  When I look at modern web development I shudder; the ecosystem is so confusing for someone who has been out of touch as long as I have.  Node, webpack, yarn, npm, frameworks, UMD, AMD, arghhh!\n\nI've been watching Web Assembly with anticipation for quite some time, with the hope that it would allow me to write web applications without the typical Javascript build process.\n\nWhen Web Assembly(wasm) support [landed](https://go-review.googlesource.com/c/go/+/102835) in Go recently, I knew that the time was ripe for some experimentation.  And I couldn't wait to dive in and try it.  I read a few [good](https://blog.owulveryck.info/2018/06/08/some-notes-about-the-upcoming-webassembly-support-in-go.html) [articles](https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview#heading=h.mjo1bish3xni) before diving in.  This post will chronicle my experience.\n\nTo get started with wasm in Go you need to checkout Go from source and build it.  Web Assembly support will be released in Go 1.11, which isn't out yet.\n\nYou can find instructions [here](https://golang.org/doc/install/source) on building Go from source.  Because Go requires a working `go` installation to bootstrap itself, you'll end up with two different installations of Go when you're done.  *Caution - this could surprise you in ways you won't like if you don't remember that you've got two installs of Go.  I use [direnv](http://direnv.net) to manage my path for each project so I can specify which Go installation I want to use.*\n\nAfter installing the latest Go, you're ready to experiment with Web Assembly.  You'll need an HTML file, and a Javascript shim to load the wasm files that you produce.  These are included in the `misc/wasm` directory of your new Go installation.  You can copy them into any new project and modify the HTML file to load your wasm output.\n\nMy first project was a bit ambitious, I wanted to build something that looks roughly like a [Web Component](https://www.webcomponents.org/) in Go, compiled to Web Assembly.  I didn't get that whole thing done, because I got distracted and excited by how well everything worked.\n\nTo get started, I copied the HTML and Javascript files from `GOROOT/misc/wasm` into a new directory and added a `main.go` file.  I started with the preconcieved notion that I would render my HTML into an existing node in the DOM that I declared in the HTML file.  So I created an HTML `section` tag with the ID of `thing`.\n\n```\n    <section class=\"main\" id=\"thing\" >Please wait...</section>\n```\n\nI inserted this right above the script tags at the bottom of the HTML file.  Next, I knew I would want to replace this node programatically, so I looked up the syntax to interact with the DOM from Go's wasm libraries.  Go added a `syscall/js` package that allows interaction with the DOM.  I got a reference to the HTML node with the ID of `thing` using this Go code:\n\n```\n\tel := js.Global.Get(\"document\").Call(\"getElementById\", \"thing\")\n```\n\nNow I have a reference to the empty DOM node that I can populate with my rendered HTML.  So the next step is to actually create some HTML and stuff it in there.\n\nI used the famous TodoMVC app as my inspiration.  I started by creating two files: `todo.go` and `todolist.go`.  These files contain Go structures that represent Todo items, and a list of Todo items.\n\n```\ntype Todo struct {\n\tTitle     string\n\tCompleted bool\n\t//Root      js.Value\n\ttree *vdom.Tree\n}\n\ntype TodoList struct {\n\tTodos []Todo\n\tComponent\n}\n\ntype Component struct {\n\tName     string\n\tRoot     js.Value\n\tTree     *vdom.Tree\n\tTemplate string\n}\n```\n\nI also got a little cocky and started extracting things out into a `Component` type thinking that I would be embedding it in my custom types to give them Web Component functionality.  *I never finished this thought... you'll see why later in the article*\n\nEach of these custom Go types has a `Render()` method and a template:\n\n```\nvar todolisttemplate = `<ul>\n{{range $i, $x := $.Todos}} \n\t{{$x.Render}} \n{{end}}\n</ul>`\n```\n\n```\nfunc (todoList *TodoList) Render() error {\n\n\ttmpl, err := template.New(\"todolist\").Parse(todoList.Template)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Execute the template with the given todo and write to a buffer\n\tbuf := bytes.NewBuffer([]byte{})\n\tif err := tmpl.Execute(buf, todoList); err != nil {\n\t\treturn err\n\t}\n\t// Parse the resulting html into a virtual tree\n\tnewTree, err := vdom.Parse(buf.Bytes())\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif todoList.Tree != nil {\n\t\t// Calculate the diff between this render and the last render\n\t\t//\tpatches, err := vdom.Diff(todo.tree, newTree)\n}\t\t//\tif err != nil {\n\t\t//\t\treturn err\n\t\t//\t}\n\n\t\t// Effeciently apply changes to the actual DOM\n\t\t//\t\tif err := patches.Patch(todo.Root); err != nil {\n\t\t//\t\t\treturn err\n\t\t//\t\t}\n\t} else {\n\n\t\ttodoList.Tree = newTree\n\t}\n\t// Remember the virtual DOM state for the next render to diff against\n\ttodoList.Tree = newTree\n\n\ttodoList.Root.Set(\"innerHTML\", string(newTree.HTML()))\n\treturn nil\n}\n```\n\nMy idea was that I'd use the [vdom](https://github.com/albrow/vdom) package I found to do rendering so that the rendering would be more efficient.  That's where I ran into my first snag.\n\n## Differences Between GopherJS and Go/wasm\nThe vdom package was written for [GopherJS](https://gopherjs.org) which is a transpiler from Go to Javascript.  GopherJS uses a type called `js.Object` as the base of all its conversions.  Go's new wasm library `syscall/js` uses a type called `js.Value`.  They're similar in spirit, but very different in implementation.  This meant that my vdom rendering idea was dead in the water until I ported vdom to use the new `js.Value` type instead of `js.Object`.  The vdom's `tree.HTML()` method did work without modification, though, so I was able to set the inner HTML of my HTML node to the output of the vdom's parsing.  The Render() method parses the Go struct's template, passing an instance of the Go struct as the context.  Then it uses the vdom library to create a parsed dom tree, and renders that tree in the last line of the method:\n\n```\n\ttodoList.Root.Set(\"innerHTML\", string(newTree.HTML()))\n```\n\nAt this point I had a working Go/wasm prototype that didn't have any events wired up.  But it DID render to the dom and display in the browser.  That was a huge first step; I was pretty excited at this point.\n\nI built a Makefile so I wouldn't have to keep typing long build commands over and over:\n```\nwasm2:\n\tGOROOT=~/gowasm GOARCH=wasm GOOS=js ~/gowasm/bin/go build -o example.wasm markdown.go\n\nwasm:\n\tGOROOT=~/gowasm GOARCH=wasm GOOS=js ~/gowasm/bin/go build -o example.wasm .\n\nbuild-server:\n\tgo build -o server-app server/server.go\n\nrun: build-server wasm\n\t./server-app\n```\n\nThe make file also points out a critical problem with the state of Web Assembly today.  Modern browsers will ignore WASM files unless they're served with the proper MIME type.  [This article](https://blog.owulveryck.info/2018/06/08/some-notes-about-the-upcoming-webassembly-support-in-go.html) had a simple HTTP file server that sets the right MIME type for web assembly files.  I copied it into my project and use it to serve the app.  If your web server does the right thing for `.wasm` files, you don't need a custom server.\n\n### Nerd Sniped\nIt was at this point that I realized that Web Assembly worked really well, and maybe more importantly: much of the code for GopherJS would work with little or no modifications in Web Assembly.  I [nerd sniped](https://xkcd.com/356/) myself.  The next thing I attempted was to take a [vecty](https://github.com/gopherjs/vecty) application and compile it.  It failed pretty hard because vecty is written for GopherJS, and uses the `js.Object` types instead of `js.Value`.  I [forked vecty](https://github.com/gowasm/vecty) and made some modifications, some hacks, and commented out too much code to make vecty compile in wasm.\n\nThe end result was that the live markdown editor in the `vecty/examples` folder runs beautifully in Web Assembly.  This post is getting a little wordy, so I'll let you read the source [here](https://github.com/bketelsen/wasmplay/tree/master/markdownvecty). TL;DR: it's almost exactly the same as the GopherJS version, but web assembly exits when main() exits, so I added an empty channel receive at the end of main() to prevent the exit and keep the app running.\n\n### Events\n`syscall/js` in Go uses a very different method of registering events.  I had to modify vecty's [event registration](https://github.com/gowasm/vecty/blob/wasm-wip/dom.go#L231) code to use the new wasm method of callback registration.  It took me far too long to figure this out, but it works really well now.\n\n### Conclusion\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">2005: Rails<br>2010: Go<br>2013: Docker <br>2018: Web assembly is going to democratize the frontend.  I&#39;m predicting that in 2 years or less, Go, Swift, Rust will be 1/3 of the frontend code</p>&mdash; Brian Ketelsen (@bketelsen) <a href=\"https://twitter.com/bketelsen/status/1009989486346948608?ref_src=twsrc%5Etfw\">June 22, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nAfter playing with this for a few hours over the course of several evenings, I've decided that Web Assembly is the future of web development.  It enables any language that can compile to wasm to be a \"frontend\" language.  That's huge for old people like me who never really wanted to get into the Javascript ecosystem, and it's huge for all the languages that aren't Javascript. \n\n*You can find the source code for these demo applications [here](https://github.com/bketelsen/wasmplay).  Use at your own risk, it may destroy your computer, and it's definitely hacky code!* \n\n> Image Credit [webassembly.org](https://webassembly.org/)\n> [GopherJS](https://gopherjs.org)\n> [Vecty](https://github.com/gopherjs/vecty)\n> \n> GopherJS and Vecty are open source projects created by @neelance, @slimsag and many others.\n","published_at":"2018-06-22","created_at":"2020-04-08T14:39:14.854Z","updated_at":"2020-04-08T14:39:14.860Z","category":7,"publication":1,"slug":"Web-Assembly-and-Go:-A-look-to-the-future","author":1,"excerpt":"\nIt's no secret that I'm resistant to learning Javascript and frontend development.  I learned HTML back before CSS was even a thing, and even Javascript came long after I started doing web development.  When I look at modern web development I shudder; the ecosystem is so confusing for someone who has been out of touch as long as I have.  Node, webpack, yarn, npm, frameworks, UMD, AMD, arghhh!\n","published":null,"live":true,"image":{"id":62,"name":"612px-Web_Assembly_Logo.svg.png","hash":"af6667687c5c4ace86bf242fdb3d1e8c","sha256":"-_BfkhPkVmRa0yB64um4mhouPz0cpzWF3-dukkqNIgM","ext":".png","mime":"image/png","size":14.87,"url":"/uploads/af6667687c5c4ace86bf242fdb3d1e8c.png","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:39:14.880Z","updated_at":"2020-04-08T14:39:14.880Z"}},{"id":20,"title":"Tasty Worms","content":"\nA coworker sent me a link to this recipe and I have to share it.  It's the tastiest looking sandworm ever.\n\n[Spice Filled Sandworm](http://kitchenoverlord.com/2015/12/03/dune-week-spice-filled-sandworm/)\n\nIf you make one let me know... Looks delicious.  Blessed be the maker.\n\n*image courtesy of kitchenoverlord.com*","published_at":"2015-12-05","created_at":"2020-04-08T14:35:13.440Z","updated_at":"2020-04-08T14:35:13.449Z","category":6,"publication":1,"slug":"Tasty-Worms","author":1,"excerpt":"A coworker sent me a link to this recipe and I have to share it.  It's the tastiest looking sandworm ever.","published":null,"live":true,"image":{"id":58,"name":"sandworm-bread-03.jpg","hash":"15b96fc0d84a4c44b13ecb42d40ba1dc","sha256":"2pTxm2yxbveIlBzn2i53B7oMG_Hzuv4dqsaxoepbWnM","ext":".jpg","mime":"image/jpeg","size":1051.7,"url":"/uploads/15b96fc0d84a4c44b13ecb42d40ba1dc.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:35:13.496Z","updated_at":"2020-04-08T14:35:13.496Z"}},{"id":5,"title":"Caddy and Let's Encrypt","content":"I spent all of 5 minutes configuring [Caddy](https://caddyserver.com) to automatically pull content from github, post-process it with [hugo](http://gohugo.io) and serve it up with fresh SSL/TLS certificates from Let's Encrypt. <!--more-->\n\nWhen you think about it, that's pretty damned amazing.  Caddy already made web serving easy.  It powers everything I do now: gopheracademy.com, gophercon.com and a dozen more.  Add hugo to the mix and you have a really powerful publishing platform that is fully automated with just a git push.  I really love that Caddy polls my github repository and publishes new content.  It's a zero-overhead proposition to publish a new post.\n\nAfter configuring the Let's Encrypt integration, my esteem for Caddy leveled up to 11.  I did almost nothing to enable it.  Changed a flag in the command line to invoke Caddy, changed the URL in the Caddy configuration file from http to https.  In the background, Caddy requested and installed the certificates for me, and will continue to renew them before they expire.  SSL Everywhere is no longer a dream, it's real, it's here, and the tools couldn't be easier to use.\n","published_at":"2015-11-11","created_at":"2020-04-08T13:54:13.781Z","updated_at":"2020-04-08T13:54:13.787Z","category":1,"publication":1,"slug":"Caddy-and-Let's-Encrypt","author":1,"excerpt":"I spent all of 5 minutes configuring [Caddy](https://caddyserver.com) to automatically pull content from github, post-process it with [hugo](http://gohugo.io) and serve it up with fresh SSL/TLS certificates from Let's Encrypt. ","published":null,"live":true,"image":{"id":19,"name":"markus-spiske-iar-afB0QQw-unsplash.jpg","hash":"27a382860fef4a198f01f5a6aba24d57","sha256":"4suY2bs-fHmw2IIn5qL28VWSqlZcoex59behSDkGq9c","ext":".jpg","mime":"image/jpeg","size":4415.71,"url":"/uploads/27a382860fef4a198f01f5a6aba24d57.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T13:54:13.828Z","updated_at":"2020-04-08T13:54:13.828Z"}},{"id":13,"title":"My Cross-Platform Dev Setup on Surface Laptop","content":"\nI want to document a setup that I've found that works really well for me using Windows 10 and [Windows Subsystem for Linux](https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/) for general development.  Before we dive into any specifics, though, I want to provide some background and explain my objectives which will help to frame the decisions I've made and the trade-offs chosen to reach a more ideal environment.\n\n### Objective\nMy objective is to build a development environment that is comfortable for Open Source development with a target of mostly Linux servers.  I develop primarily in [Go](https://golang.org) but infrequently do some Javascript and HTML work too.  Prior to this setup, I have been using a Linux dev machine either directly or remotely over SSH.  My ultimate goal is to replicate a Linux development environment without having to use a separate machine.   \n\n### Trade Offs\nThere are some implicit trade-offs in this setup, and I will acknowledge them along the way.  I recognize that this setup isn't perfect, but I've found it to be very comfortable with very few limitations.\n\n### Preferences\nIt's also useful to acknowledge my personal preferences, since they obviously inform these decisions.  I prefer to develop completely in Linux.  I prefer not to have to fight to use Linux as a primary desktop operating system.  I prefer to have only one computer.  I prefer [neo]vim for most editing, but reserve the right to use a GUI when I want to.  Another preference that is important here: I really dislike local VM's for development.  They get lost, they aren't sharable, file sharing between host and VM is flaky.  I just can't use a local VM for development work.\n\n### The TL;DR\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/_y2e4QaUktQ\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n### The Setup\n* **Surface Laptop:** i7, 16GB RAM, 512GB SSD, Surface Dock\n* **Operating System:** Windows 10 - Insider Edition\n* **Shell:** Windows Subsystem for Linux (also called Windows Bash)\n* **Code Editors:** neovim and Visual Studio Code\n\n### Configuration\nThere are a few key components to this configuration that make it unique, and improved my happiness dramatically.\n\n#### Where to put the code\nI store my code in Windows.  For the past year I treated the WSL filesystem and the Windows filesystem as two separate entities with a hard border between them.  WSL allows you to access the Windows filesystem through a mount at '/mnt/c' which is awesome, but viewing those files in WSL just bothered me because the permissions show as '777' with an owner of 'root'.  This bothers me most because of the ugly display of these permissions in bash.  Like many people, I had an alias in my bash settings to append \"--color=auto\" to my 'ls' calls.  This causes files with excessive permissions to show up in black text with a bright green background.  \n> It drove me crazy, and blocked me from even looking at the windows filesystem from bash.  \n\n![uglycolors](https://content.brian.dev/uploads/a6f66697d2714b56b9560df579dd1378.png)\n\nThat meant that my source code was only in WSL's filesystem, and completely invisible to Windows.   In turn, this caused limitations on what I could do with the code.  Because it was only in WSL, I had to operate on the files using either command-line tools, or X Windows tools using an X Client from Windows.  It wasn't a show-stopper, but it was a little awkward.\n\nI don't know why it didn't occur to me before, but I just removed the \"--color=auto\" settings in my .bashrc last weekend, and suddenly I was perfectly happy looking at files on the Windows filesystem from WSL's bash. ![nouglycolors](https://content.brian.dev/uploads/93b6088ba3b948f2a3c42e0b1ea51bac.png)  No strange colors, no mental block about viewing the files!  This was actually a pretty big turning point for me.  As crazy as it may sound, just removing coloring from my bash prompt unblocked me from using and viewing the Windows filesystem from WSL.  Tiny change, huge mental gain.  I moved my code from WSL to the Windows filesystem:\n```\nmv ~/src /mnt/c/projects\n```\nThen I set my $GOPATH to \"/mnt/c/projects\" and Go worked beautifully from WSL.  I also installed Go on Windows and set my GOPATH to \"C:\\projects\", which is the same folder.  Now I have one folder accessible to both WSL and Windows. Because Go stores compiled libraries in a folder named after the architecture under \"$GOPATH/pkg\", I can compile from both Windows and Linux without overwriting any object files or binaries.  \n> That's pretty damn nice.\n\nOn the Windows side, I installed Visual Studio Code and set it up to use the Windows installation of Go for all the tooling required by the VSCode plugin for Go.   The only change to my VS Code configuration file was to specify the global $GOPATH:\n```\n{\n    \"go.gopath\": \"c:\\\\projects\"\n}\n```\nThis setup uses the Windows Go installation to do code linting and other niceties that the VS Code Go plugin provides.  It also allows me to switch Go toolsets easily between Windows and Linux.  To build in Windows, I just open Powershell.  To build in Linux, I open a WSL prompt.   90% of the time, I'm using Neovim in WSL anyway, but it's really nice to have VS Code working on the same files.  It's also really nice to be able to build and test an app in Windows easily.\n\n### Docker\nI installed Docker for Windows, and installed the \"docker\" command in WSL.  To let Docker work against the Windows installation, I needed to export \"DOCKER_HOST\" in my .bashrc\n```\nexport DOCKER_HOST=tcp://127.0.0.1:2375\n```\nIt's also necessary to tell Docker for Windows to listen on TCP:\n![dockersettings](https://content.brian.dev/uploads/1ff54ca30abf4a9e99356793f3304aed.png)\n\nNow Docker works from both Windows and WSL.  All my code and scripts that expected a local Docker instance continue to work as they did when I was developing directly on a Linux host.\n\n### The Kicker\nThe Surface Laptop is an awesome little machine.  It is roughly the same size as a MacBook Air, but it has a full touch screen that allows you to use the Surface Pen to draw.  The sound is fantastic; some of the best speakers I've ever heard on a laptop.  The keyboard is comfortable, and the cool fuzzy leather keyboard cover is comfortable and prevents that awful pain many of us experience when resting your hands on a MacBook for too long -- from those sharp edges on the case.\n\nBut maybe most exciting is using the Surface Laptop with the [Surface Dock](https://www.microsoft.com/en-us/store/d/microsoft-surface-dock/8qrh2npz0s0p/hpr1?OCID=AID620866_SEM_WcsVqgAABYJtT8Nn%3a20170929022339%3as).  The dock has several USB ports, two mini Display Port ports, and audio out.  When I want to work at my desk, I just plug the single (slightly awkward) dock plug in to the side of the laptop and close the lid.  I get my nice WASD Code mechanical keyboard, a big 4k monitor, and all the comforts of working on a desktop.  Reliable and easy docking is something I missed terribly in both Linux laptops and macOS.  Single plug, simple docking experience.  I love this probably most of all.\n\n### Summary\nNone of this is revolutionary, but the setup as a whole makes me happy.  I have all the comforts of a consumer-grade operating system (Windows), so I can easily use Skype, Slack, Microsoft Teams, Outlook, etc without fighting to install them on Linux, or worse -- settling for a nasty web interface. \nI also have all the benefits of a full Linux development environment.  I can use \"apt\" to install any packages I want, I use Neovim, all my dotfiles work perfectly in WSL.  It's a full Linux development environment without a VM.\n**This setup has enabled me to go down to a single computer for my day-to-day usage.**  Only one computer on my desk now, instead of the three that were there before.   I haven't turned on my MacBook Pro in almost a week. ","published_at":"2017-09-29","created_at":"2020-04-08T14:16:42.597Z","updated_at":"2020-04-08T14:18:50.264Z","category":1,"publication":1,"slug":"My-Cross-Platform-Dev-Setup-on-Surface-Laptop","author":1,"excerpt":"I want to document a setup that I've found that works really well for me using Windows 10 and [Windows Subsystem for Linux](https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/) for general development.  Before we dive into any specifics, though, I want to provide some background and explain my objectives which will help to frame the decisions I've made and the trade-offs chosen to reach a more ideal environment.","published":null,"live":true,"image":{"id":38,"name":"desktop.png","hash":"32f178dad7c94e5bb78194a83bd316db","sha256":"xS_dzJ7Q93ysVzjeimbMN3oRqSvoqoIbVvhOnMeJCYM","ext":".png","mime":"image/png","size":761.4,"url":"/uploads/32f178dad7c94e5bb78194a83bd316db.png","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:16:42.620Z","updated_at":"2020-04-08T14:16:42.620Z"}},{"id":11,"title":"Going Overboard with WSL metadata","content":"\n### Nerd Sniped\nIt all started with a simple tweet from [@nunixtech](https://twitter.com/nunixtech):\n\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/VirtualScooley?ref_src=twsrc%5Etfw\">@VirtualScooley</a> <a href=\"https://twitter.com/richturn_ms?ref_src=twsrc%5Etfw\">@richturn_ms</a> <a href=\"https://twitter.com/tara_msft?ref_src=twsrc%5Etfw\">@tara_msft</a> <a href=\"https://twitter.com/CraigWilhite?ref_src=twsrc%5Etfw\">@CraigWilhite</a> <a href=\"https://twitter.com/benhillis?ref_src=twsrc%5Etfw\">@benhillis</a> In order to Thank You for the new Distros, here is a small hack from your &quot;favorite&quot; WSLCorsair. the mount options might need some review though. <a href=\"https://twitter.com/bketelsen?ref_src=twsrc%5Etfw\">@bketelsen</a> this might help you (do I enter the HAT gift list? ?) <a href=\"https://t.co/7ouUX5Jm3h\">pic.twitter.com/7ouUX5Jm3h</a></p>&mdash; Nuno do Carmo (@nunixtech) <a href=\"https://twitter.com/nunixtech/status/971145708018466816?ref_src=twsrc%5Etfw\">March 6, 2018</a></blockquote>\n\nNuno showed how to use new [metadata support](https://cda.ms/hs) in Windows Subsystem For Linux to enable Linux permissions and metadata on a mounted Windows share.  Never content to let a good hack go unexplored, I wanted to see if it was possible to make a Windows folder be my WSL home directory with no adverse side-effects.\n\n### The Setup\nI started with an existing and well-used WSL installation of Ubuntu.  My first step was to replicate Nuno's example, mounting a Windows shared drive with appropriate Linux metadata.  It worked well. But I wanted to make that directory my `$HOME`, and have access from both Windows and WSL with no penalties or worries about permissions or corrupted files.\n\nI created a folder on my `C:\\` drive called `home`.  I then shared the directory as Nuno did so it could be mounted from `/etc/fstab` on the WSL side of things.\n\n### First Attempt\nThe first thing I tried doing was changing my `/etc/fstab` entry for the mounted share to mount it at `/home/bketelsen`.  It worked, but of course it replaced my existing home directory with the mounted one.  I reversed my change in `fstab` and made a new mountpoint at `/home/bketelsen2`.  I mounted the Windows share there, then used `rsync` to copy my old WSL-only home into the mounted directory:\n```\n$> rsync -azvh /home/bketelsen/ /home/bketelsen2\n```\nThis took quite a while to complete because my home directory in WSL was full of code.  When it finished, I had a full copy of my WSL home `/home/bketelsen2` directory which was mounted from `C:\\home`.  On the Windows side, the `C:\\home` directory shows all of my WSL files:\n\n![Windows Side](https://content.brian.dev/uploads/6e3f9e355e5c487c810039ea4c597a2d.PNG)\n\nThat's pretty slick!  Now all I needed to do was make that my $HOME and I'd be set. \n\n> Narrator: Nothing is ever that easy.\n\n[Nuno's post](http://wslcorsair.blogspot.ch/2018/03/wsl-one-home-to-host-them-all.html) shows mounting the Windows share using `/etc/fstab` which works, but I couldn't get the extra `metadata` flag in the mount line to actually make metadata support work. I don't know if this is by design, or an omission, but I didn't notice it until I tried making an ssh connection and my ssh keys had overly broad permissions.  After changing the keys' permissions, it still failed.  The `chmod` command didn't apply the expected permissions.\n\n### Second Attempt\nI pondered a bit and realized that I was dealing with Linux, and mounting the share at `/home/bketelsen` was only one way to solve the problem.  The other way is to change my home directory's location in the Linux user database.  Specifically, using the `usermod` command:\n\n```\nsudo usermod -d /mnt/c/home bketelsen\n```\n\nThis is the right command, but it fails because the WSL process is spawned as a `bash` process started by my user, `bketelsen`.  There can be no processes running as `bketelsen` when you make the `usermod` change, so that approach wouldn't work.  I searched for ways to launch WSL directly as the root user, but in the middle of that search I remembered that the home directory is actually specified in `/etc/passwd`:\n```\nbketelsen:x:1000:1000:,,,:/home/bketelsen:/bin/bash\n```\nYES!  I edited this file to reflect my new desired $HOME directory:\n```\nbketelsen:x:1000:1000:,,,:/mnt/c/home:/bin/bash\n```\nClosing and re-opening WSL confirmed that my WSL `$HOME` directory was now `/mnt/c/home` which contained all the files that were previously stored in `/home/bketelsen`.  I quickly created a text file from the Windows side at `C:\\home\\thing.txt` and verified that it existed on the WSL mount too.\n\n### SUCCESS\nWith this setup, I have a single folder -- `C:\\home` -- available in Windows, but also mounted as my WSL `$HOME`, too.  Files can be modified on either side, with no apparent ill effects. ***Editors Note: This is unproven, and not for risk-averse people.  Use this setup at your own risk.  Backup your data.*** \n\n![wsl-side](https://content.brian.dev/uploads/075bd07d707e4de58a6cfd36420e0a7a.PNG)\n### One More Thing\nBecause too much is never enough, I wanted to prove that this would work for more than one WSL installation.  So I installed the just-announced Debian WSL app, and applied exactly the same change to my `/etc/passwd` file and `/etc/wsl.conf` files.\n\n![debian-installer](https://content.brian.dev/uploads/73399dfd7e584e6db2b19be925d28f84.PNG)\n\nNow I have two different Linux installations in WSL: Ubuntu and Debian.  They have separate root filesystems, but a single shared `$HOME` directory:\n\n![debian](https://content.brian.dev/uploads/d422f81fbb0b4d4dac72c4af641cb115.PNG)\n\nThis is extremely cool.  I set up my Go development environment on the Windows side using [Visual Studio Code](https://cda.ms/ht) but set the `$GOPATH` to `C:\\home\\go`, which is the same as `$HOME/go` on the WSL side.  Now I can develop in Windows or WSL/Linux against the exact same code without any strange permission problems.  Most of the time I'll probably stay in `neovim`, because it's my first love.  But there are no issues when I use VS Code from the Windows side.  I can compile and test from both Windows and Linux with the same source directory.  \n\nHere's the contents of my `/etc/wsl.conf` for your perusal:\n```\n# Enable extra metadata options by default\n[automount]\nenabled = true\noptions = \"metadata,umask=22,fmask=11\"\nmountFsTab = true\n\n# Enable DNS – even though these are turned on by default, we’ll specify here just to be explicit.\n[network]\ngenerateHosts = true\ngenerateResolvConf = true\n```\n\nThank you to [@nunixtech](https://twitter.com/nunixtech) for the idea that spawned this probably-evil hack. I'm unreasonably delighted with how cool this little hack is, and it opens a lot of other possibilities for other potentially unauthorized or dangerous hacks, too.  If you've done something equally unorthodox with your WSL install, tell me about it on [twitter](https://twitter.com/bketelsen)!\n\n### Update\nI realized after this worked that the next logical progression of this experiment was to share the same $HOME between Windows and WSL.  TLDR; It works perfectly.  I updated my `/etc/passwd` home directory entry to `/mnt/c/Users/bkete`, moved the contents of the `c:\\home` directory into `c:\\Users\\bkete`, and now I have a single shared home directory between Windows and WSL.  Here's a picture of my OneDrive directory being accessed from WSL as `$HOME/OneDrive`:\n\n![onedrive](https://content.brian.dev/uploads/73d1a47520784e8990048a40523ae432.PNG)\n\n","published_at":"2018-03-10","created_at":"2020-04-08T14:11:49.701Z","updated_at":"2020-04-08T14:11:49.707Z","category":1,"publication":1,"slug":"Going-Overboard-with-WSL-metadata","author":1,"excerpt":"Going a bit overboard with WSL","published":null,"live":true,"image":{"id":32,"name":"windows-side.PNG","hash":"78ecc62784e840cea188a734caae4cc7","sha256":"TjD10yJCdcBVypSk3bIXbDnUnosWbu2SJzc450aq7-4","ext":".PNG","mime":"image/png","size":182,"url":"/uploads/78ecc62784e840cea188a734caae4cc7.PNG","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:11:49.730Z","updated_at":"2020-04-08T14:11:49.730Z"}},{"id":10,"title":"Go 1.7","content":"\nRelease day is always fun, and Go releases get me pretty excited.  The 1.7 release is especially nice, so I'm going to mention some of my favorite changes in this release.\n<!--more-->\n### IBM z System Support\nBill O'Farrell gave a [talk](https://github.com/gophercon/2016-talks/blob/master/BillO'Farrell-GoForLinuxOnZ.pptx) at GopherCon 2016 about this port and I found it fascinating.  Supporting Go on big iron can only be good for the language and for Go users everywhere.  This is an exciting development and I'm looking forward to see what comes next from the IBM team.\n\n### SSA In the Compiler\nThe compiler got an upgrade in Go 1.7 -- with Static Single Assignment, or SSA support.  This new SSA support means that it will be easier in the future to analyze and optimize your code while it's being compiled.  Coupled with other changes in the compiler toolchain, we've already seen some nice improvements both in compile times and binary size decreases.  Kudos to the Go team for putting in the hard work and planning for future optimizations.  SSA is going to bring us big things.\n\n### Context is now in standard library\nPerhaps my favorite new feature: the x/net/context package has been moved into the standard library.  Additionally, packages like net/http and os/exec have gained support for this new package without breaking the Go 1 compatibility contract.  The Context package allows you to support cancelation, timeouts, and stores interesting request-specific data -- allowing you to have more control over the network requests that you make.\n\n### macOS Sierra\nA big caveat with this release:  If you compile binaries for macOS Sierra you'll need to use either Go 1.6.3 or Go 1.7.  Binaries compiled with older versions of Go won't work reliably on macOS Sierra.  They may appear to be working, but I've seen firsthand that they'll eventually fail in spectacular ways.  If you distribute binaries using an automated build system, please update your automation to use Go 1.6.3 or Go 1.7.\n\n** UPDATE ** Go 1.6.3 was re-broken with the new macOS Sierra beta 4.  Use 1.7.\n\n### Performance\nChanges to the garbage collector and other runtime components should result in a \"5-35%\" improvement in the speed of your application.  I absolutely love that Go gets better and faster with each release.  Compile times are coming back down after the big spike in the 1.5 release.\n\n### Hooray!\nCheck out all of the changes over on the Go [blog](https://golang.org/doc/go1.7).  And fire up your [downloads](https://golang.org/dl/).\n\n","published_at":"2016-06-08","created_at":"2020-04-08T14:07:31.061Z","updated_at":"2020-04-08T14:07:31.068Z","category":2,"publication":1,"slug":"Go-1.7","author":1,"excerpt":"Release day is always fun, and Go releases get me pretty excited.  The 1.7 release is especially nice, so I'm going to mention some of my favorite changes in this release.","published":null,"live":true,"image":{"id":26,"name":"photo-1487505983481-9aa2d9f9901a.jpg","hash":"7f76746926974ba9bc44624c39ca9734","sha256":"ttXthpSTaXQsudTx0Gdd_4ocQANVeX8OJuODcjvry54","ext":".jpg","mime":"image/jpeg","size":92.64,"url":"/uploads/7f76746926974ba9bc44624c39ca9734.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:07:31.089Z","updated_at":"2020-04-08T14:07:31.089Z"}},{"id":16,"title":"Open Source Appreciation","content":"\nI've never been shy about sharing my love for Open Source.  I love creating things, and I love sharing them with others.  One of my particular joys with Open Source Software, however, is finding new projects that excite me.\n\nI generally get excited about new OSS projects for two reasons:\n\n1. It does something I want or need to do\n1. It is written in a way that allows or encourages me to learn something new\n\nThe first is obvious... when I've got a project to complete and it makes sense to use an open source component, it's my first preference.  I'm always happy when someone else has thought through the hard parts and done the work to make a quality project and share it with the world.  I truly enjoy contributing to these projects too.  Some developer scratched an itch she had and shared it with the world, now I get to help make it better.  That's just winning for everyone.\n\nThe second reason I get excited is when I find a project that teaches me something.  This happened a few days ago with [goa](http://goa.design).  Two things about `goa` excited me.  It is a very well written DSL in Go, and it uses Go's `net/context` library in an unusual way.  I say \"unusual\", but after studying `goa` more I've come to the conclusion that I've only been using `net/context` at half it's capability in my past projects.  The author of goa -- Raphael Simon\nfrom RightScale -- is using contexts to their full potential.  Learning from this code is making me a better programmer.\n\nI spent the next few days shouting from the mountain tops about my newfound love for `goa`.  Anybody who follows me on Twitter can attest to this.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">This repo should have a thousand stars by now: <a href=\"https://t.co/iSsQeEAC03\">https://t.co/iSsQeEAC03</a> <a href=\"https://twitter.com/hashtag/golang?src=hash\">#golang</a></p>&mdash; Brian Ketelsen (@bketelsen) <a href=\"https://twitter.com/bketelsen/status/666697133437923328\">November 17, 2015</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\">So I spent a few hours converting an internal API to goa (<a href=\"https://t.co/EYoAB1wTeV\">https://t.co/EYoAB1wTeV</a>) and I think I want to marry the guy who wrote it.</p>&mdash; Brian Ketelsen (@bketelsen) <a href=\"https://twitter.com/bketelsen/status/666786731807662081\">November 18, 2015</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nI was talking with Matt Holt, author of another of my favorite open source projects [Caddy](https://caddyserver.com), and our discussion evolved into the various ways we like to show appreciation for software projects we like and use.  I've told Matt dozens of times how much I love and appreciate Caddy.  And I believe that he enjoys hearing it.  Some of the ways of showing appreciation we listed:\n\n1.  Open an issue on the GitHub repository with a quick thank you note.  \"No problem with your software, just wanted to let you know I'm using it and love it.\" or \"I really love the way you solved X problem by doing Y, I learned a lot, thanks!\"   I do this frequently and it's always received well.\n\n1.  Send the author(s) a thanks on Twitter if you know their Twitter handle.  Simple and direct, and who doesn't love hearing that someone is using their project?\n\n1.  If the project has a developer mailing list or IRC/Slack/Gitter channel, pop in and say the same thing.\n\n1.  Write a blog post about the software/project and how you use it or why you like it.  I set up Google News Alerts on new projects and it's always a treat when I get an email from Google listing a blog post about one of my projects. \n\nI'm sure you can think of dozens of other ways to show your appreciation for the Open Source Software you use.  None of them are particularly burdensome or time consuming.  And they almost always have a postive impact.\n\nI'd like to propose a new hash tag on Twitter:  *#freesoftwarefriday*\n\nLet's start showing more appreciation to the people who put hard work into projects that we use.  If you use a gem, egg, package, project, script, or any other Open Source code, take a moment on each Friday to give a shout out to that project or the maintainers.  I'd venture a guess that most OSS project owners would be delighted to see them or their project mentioned.  It might even give them the encouragement to create more projects, or add more features.  OSS can be a thankless\njob sometimes.  Anyone who has released OSS code knows that there's a burden of time and a psychological burden that goes along with releasing code.  A kind word to the author might lessen that burden a bit.  You might just make someone's day.\n","published_at":"2015-05-11","created_at":"2020-04-08T14:24:52.603Z","updated_at":"2020-04-08T14:25:22.559Z","category":8,"publication":1,"slug":"Open-Source-Appreciation","author":1,"excerpt":"I've never been shy about sharing my love for Open Source.  I love creating things, and I love sharing them with others.  One of my particular joys with Open Source Software, however, is finding new projects that excite me.","published":null,"live":true,"image":{"id":44,"name":"photo-1442504028989-ab58b5f29a4a.jpg","hash":"a307fcab3b2f48629d37a429bbba05d3","sha256":"ARK3m34lK0VOvrMrFKNxQzhMwuXw-FWr8ynK-O8aS_I","ext":".jpg","mime":"image/jpeg","size":70.97,"url":"/uploads/a307fcab3b2f48629d37a429bbba05d3.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:24:52.640Z","updated_at":"2020-04-08T14:24:52.640Z"}},{"id":2,"title":"Kubernetes and waSCC","content":"Earlier this week, [the Deis Labs team announced Krustlet](https://deislabs.io/posts/introducing-krustlet/), a Kubernetes kubelet implementation written in Rust that executes Web Assembly.\n\nI pitched in on this release, especially on the [waSCC](https://wascc.dev/) provider.   I thought it would be fun to live-stream the creation of a waSCC actor and show it running in Kubernetes.\n\nHere's the [video](https://www.youtube.com/watch?v=uy91W7OxHcQ) on Youtube.\n\nHere's the [pull request](https://github.com/deislabs/krustlet/pull/174) adding the demo.\n\n\n## Resources\n\n[Krustlet](https://github.com/deislabs/krustlet)\n[waSCC](https://wascc.dev)","published_at":"2020-04-09","created_at":"2020-04-07T18:50:22.505Z","updated_at":"2020-04-09T15:31:12.647Z","category":1,"publication":1,"slug":"Kubernetes-and-waSCC","author":1,"excerpt":"Youtube video of a waSCC actor running on Krustlet.  Web Assembly on Kubernetes!","published":null,"live":true,"image":{"id":8,"name":"icon-512.png","hash":"0b4909688ebb43b7a8b09ef23f9c4e7e","sha256":"MAfS-qV7qjoXukcbpo_PiejoGKqPj7bTtHiORoIPtLU","ext":".png","mime":"image/png","size":92.52,"url":"/uploads/0b4909688ebb43b7a8b09ef23f9c4e7e.png","provider":"local","provider_metadata":null,"created_at":"2020-04-07T18:50:22.529Z","updated_at":"2020-04-07T18:50:22.529Z"}},{"id":8,"title":"sync.ErrGroup","content":"In this article for O'Reilly I explore the new sync.ErrGroup package.\n\n\n[Article](https://www.oreilly.com/learning/run-strikingly-fast-parallel-file-searches-in-go-with-sync-errgroup)\n[Source Code](https://github.com/bketelsen/gogrep)\n","published_at":"2016-09-19","created_at":"2020-04-08T14:03:22.891Z","updated_at":"2020-04-08T14:03:22.897Z","category":2,"publication":1,"slug":"sync.ErrGroup","author":1,"excerpt":"In this article for O'Reilly I explore the new sync.ErrGroup package.\n","published":null,"live":true,"image":{"id":23,"name":"photo-1495573258723-2c7be7a646ce.jpg","hash":"a3382a89193148168be4cf56b5cbc19f","sha256":"QPwnTId9sZaL9d92XPCJtYsIeo7JYrZTrIhTR2-wUxo","ext":".jpg","mime":"image/jpeg","size":124.73,"url":"/uploads/a3382a89193148168be4cf56b5cbc19f.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T14:03:22.920Z","updated_at":"2020-04-08T14:03:22.920Z"}},{"id":6,"title":"Career 2.0 - Go Training, Videos, Speaking","content":"\nA week ago I decided to start a new journey.  While I truly enjoyed working with Blake Mizerany and the team at [backplane](http://backplane.io), I felt I really had a passion for training and growing the Go community and I decided I owe it to myself to pursue it.\n<!--more-->\n### Flashback: GopherCon 2016\nI taught a one day workshop at GopherCon - Building HTTP APIs in Go - and I really enjoyed the experience.  Putting together the class was a lot of fun, and I got a lot of very positive feedback from the people in the class.  I've done corporate training in the past and I had forgotten how much fun it is.  As the feedback from the class started coming in, it occured to me that this might be the solution to a problem I've had for three years now.\n\n### The Conference Organizer's Dilemma\nRunning a technical conference takes a tremendous toll on a person.  It's at least a full-time job for the several months leading up to the conference.  But for all three years I've been co-organizing GopherCon with Erik St. Martin I've had a full time job to pay the bills.  We run GopherCon lean so the cost to attend is as low as possible -- that means it's never going to be something I can use to replace the income of a \"day job\".  We've talked about it several times, and we're not interested in raising the prices to turn GopherCon into a profit-making enterprise.  GopherCon is about the community, and even though attending a conference is never cheap we don't want to make the ticket price any higher than it has to be to pay the bills.  The challenge for both of us has been to juggle full time jobs while organizing a conference and still having families that need our time and attention too.\n\n### The Solution\nIt didn't take me long to realize that I can't continue at this burnout rate. I love the Go community, and helping to foster its growth is one of the places in my life where I get the most satisfaction.  The logical conclusion for me is to adjust my career to match the things in my life that are important.  So today I'm announcing Brian Ketelsen 2.0.  I've aligned my work life with the needs of my family, my abilities, and my passion for the Go community.  I have a four pronged plan for paying the bills.\n\n#### Consulting\nI'm available for short term and project based [consulting](https://brianketelsen.com/).  Get in touch if you need some help with a stubborn project or just want to do some staff augmentation.  Details are in the \"Consulting\" link in the menu above.\n\n#### Online Training\nI've started an [online learning center](http://learn.brianketelsen.com) where my first course is available to purchase.  It's a deep dive into the amazing `goa` code generation framework for building APIs in Go.  The course isn't complete yet, but if you [buy it now](http://learn.brianketelsen.com/courses/master-api-development-with-goa?product_id=140234&coupon_code=GOAVIDEO) you'll get a great discounted rate and you can follow along as new lessons are released.  The `goa` class is the first of many.  Some will be free, but most will be inexpensive like this first one.  If you have ideas for topics you want me to cover, I'd love your feedback.  I plan to cover topics including:\n\n* Microservices\n* Distributed Applications / Coordination (Go focused)\n* Testing (Go focused)\n* Containers and Orchestration (Kubernetes, Rancher, Docker)\n\nI hope that these courses fill a gap in the learning materials available today.  Most of the learning materials available aren't very specific and don't dive deep enough into a topic to be of much immediate value.  These courses won't be generalized, but specific and detailed classes that you can put to use right away.\n\n#### In Person Training\nI've also partnered with [O'Reilly](http://oreilly.com) to offer in-person training classes in Boston and San Francisco.  You'll see more specific details with dates and registration information as soon as we've ironed out the schedules.  \n\n#### Corporate Training\nFinally, I'm booking corporate training classes for teams that want to learn about Go, Distributed Computing, and Orchestration technologies.  I've got several companies lined up already and I'm very excited to share my [experience](/about).  If your team is looking to level-up on Go, Docker, or Kubernetes shoot me an [email](me@brianketelsen.com) and get on the schedule!\n\n#### Availability\n\nHere's my calendar for the next several months:\n\n* August 17-21 - Speaking at Abstractions.io in Pittsburgh\n* August 22-26 - Training Booked!\n* August 29 - September 2 - Consulting Booked!\n* September 5-9 - Training Booked!\n* September 12-16 - *Available for Training*\n* September 19-23 - Training Booked!\n* September 26-30 - Training Booked!\n* October 3-7 - O'Reilly in Boston \n* October 24-28 - Training Booked!\n* October 31 - November 4 - O'Reilly in San Francisco\n* November 5 - November 30 - *Available for Training*\n* December - *Available for Training*\n\nYou can stay informed about my upcoming classes, events, trainings and speaking engagements by signing up for my newsletter in the footer down below. Thank you to everyone who provided much-needed advice as I considered this transition.  I hope you'll come along with me for the ride -- I'm excited that I've finally found a solution to the Conference Organizer's Dilemma. \n","published_at":"2016-06-18","created_at":"2020-04-08T13:57:04.879Z","updated_at":"2020-04-08T13:57:16.820Z","category":5,"publication":1,"slug":"Career-2.0-Go-Training-Videos-Speaking","author":1,"excerpt":"A week ago I decided to start a new journey.  While I truly enjoyed working with Blake Mizerany and the team at [backplane](http://backplane.io), I felt I really had a passion for training and growing the Go community and I decided I owe it to myself to pursue it.","published":null,"live":true,"image":{"id":20,"name":"photo-1492538368677-f6e0afe31dcc.jpg","hash":"433d649028bd472d857765023239ac55","sha256":"B2BQA7W2kZwqgqKDqPTsRPwqV2PsOnezHpEUCYMFYj0","ext":".jpg","mime":"image/jpeg","size":195.29,"url":"/uploads/433d649028bd472d857765023239ac55.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T13:57:04.908Z","updated_at":"2020-04-08T13:57:04.908Z"}}],"projects":[{"id":2,"title":"devlx","description":"Development Environments for Linux","github":"https://github.com/bketelsen/devlx","category":1,"created_at":"2020-04-08T01:00:43.359Z","updated_at":"2020-04-08T01:08:57.545Z","content":"`devlx` is a command line tool that simplifies creating isolated containers for development projects in Linux.  It uses templates and advanced features of [LXD](https://linuxcontainers.org/lxd/introduction/) to allow both sound and X11 from the container to work on the host.","publication":1,"slug":"devlx"}],"pages":[{"id":1,"title":"About","content":"Howdy!  \n\nI'm a father of three, living in Tampa Florida, and working at Microsoft as a Cloud Advocate.\n\n[Twitter](https://twitter.com/bketelsen)\n\n[Youtube](https://youtube.com/bketelsen)\n\n[Twitch](https://twitch.tv/bketelsen)\n","slug":"About","created_at":"2020-04-08T15:01:02.305Z","updated_at":"2020-04-08T17:09:51.111Z","publication":1,"photo_credit":"Florian Klauer","photo_credit_url":"https://unsplash.com/@florianklauer","featured_image":{"id":77,"name":"rsz_florian-klauer-489-unsplash.jpg","hash":"461276d4624942ad82992ae8516291d4","sha256":"RU9jRMO47bojzdmlB0YlxvR6hY1r-dFVyb63WvDv_eY","ext":".jpg","mime":"image/jpeg","size":193.26,"url":"/uploads/461276d4624942ad82992ae8516291d4.jpg","provider":"local","provider_metadata":null,"created_at":"2020-04-08T15:17:48.634Z","updated_at":"2020-04-08T15:17:48.634Z"}},{"id":2,"title":"Colophon","content":"Static site framework and routing: [Sapper](https://sapper.svelte.dev/)\n\nComponents: [Svelte](https://svelte.dev/)\n\nContent: [Strapi](https://strapi.io/)\n\nTemplate modified from [Charca](https://github.com/Charca/sapper-blog-template)\n","slug":"Colophon","created_at":"2020-04-08T15:33:36.482Z","updated_at":"2020-04-08T20:23:27.566Z","publication":1,"photo_credit":"BeFonts","photo_credit_url":"https://befonts.com/zephyr-typeface-2.html","featured_image":{"id":78,"name":"zephyr-typeface-2.png","hash":"183f927545704830879b24aa4a7cf985","sha256":"ssiN1YsSRoSI5NvgzKAHjWtOGNhtpe9IIQCuB9W7LBU","ext":".png","mime":"image/png","size":133.63,"url":"/uploads/183f927545704830879b24aa4a7cf985.png","provider":"local","provider_metadata":null,"created_at":"2020-04-08T15:33:36.510Z","updated_at":"2020-04-08T15:33:36.510Z"}}]}